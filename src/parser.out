Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AT
    EXTERNAL
    FILE
    GOTO
    IMPLEMENTATION
    INTERFACE
    LABEL
    LBRACK2
    LCURLY
    NOT
    PACKED
    POINTER
    RBRACK2
    RCURLY
    UNIT
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> programHeading block DOT
Rule 2     programHeading -> PROGRAM identifier SEMI
Rule 3     identifier -> IDENT
Rule 4     block -> declarations compoundStatement
Rule 5     declarations -> declaration declarations
Rule 6     declarations -> empty
Rule 7     declaration -> constantDefinitionBlock
Rule 8     declaration -> typeDeclarationBlock
Rule 9     declaration -> variableDeclarationBlock
Rule 10    declaration -> procedureAndFunctionDeclarationBlock
Rule 11    constantDefinitionBlock -> CONST constantDefinitionList
Rule 12    constantDefinitionList -> constantDefinitionList constantDefinition SEMI
Rule 13    constantDefinitionList -> constantDefinition SEMI
Rule 14    constantDefinition -> identifier EQUAL constant
Rule 15    constant -> unsignedNumber
Rule 16    constant -> sign unsignedNumber
Rule 17    constant -> identifier
Rule 18    constant -> sign identifier
Rule 19    constant -> string
Rule 20    constant -> constantChr
Rule 21    unsignedNumber -> unsignedInteger
Rule 22    unsignedNumber -> unsignedReal
Rule 23    unsignedInteger -> NUM_INT
Rule 24    unsignedReal -> NUM_REAL
Rule 25    sign -> PLUS
Rule 26    sign -> MINUS
Rule 27    string -> STRING_LITERAL
Rule 28    constantChr -> CHR LPAREN unsignedInteger RPAREN
Rule 29    typeDeclarationBlock -> TYPE typeDefinitionList
Rule 30    typeDefinitionList -> typeDefinitionList typeDefinition SEMI
Rule 31    typeDefinitionList -> typeDefinition SEMI
Rule 32    typeDefinition -> identifier EQUAL type_
Rule 33    type_ -> scalarType
Rule 34    type_ -> subrangeType
Rule 35    type_ -> typeIdentifier
Rule 36    type_ -> stringType
Rule 37    type_ -> arrayType
Rule 38    scalarType -> LPAREN identifierList RPAREN
Rule 39    identifierList -> identifierList COMMA identifier
Rule 40    identifierList -> identifier
Rule 41    subrangeType -> unsignedInteger DOTDOT unsignedInteger
Rule 42    identifierType -> IDENT
Rule 43    stringType -> STRING LBRACK unsignedInteger RBRACK
Rule 44    structuredType -> arrayType
Rule 45    structuredType -> recordType
Rule 46    structuredType -> setType
Rule 47    arrayType -> ARRAY LBRACK subrangeType RBRACK OF typeIdentifier
Rule 48    typeList -> typeList COMMA indexType
Rule 49    typeList -> indexType
Rule 50    indexType -> simpleType
Rule 51    simpleType -> identifierType
Rule 52    recordType -> RECORD fieldList END
Rule 53    fieldList -> fixedPart
Rule 54    fieldList -> fixedPart SEMI variantPart
Rule 55    fieldList -> variantPart
Rule 56    fixedPart -> recordSectionList
Rule 57    recordSectionList -> recordSectionList SEMI recordSection
Rule 58    recordSectionList -> recordSection
Rule 59    recordSection -> identifierList COLON type_
Rule 60    variantPart -> CASE tag OF variantList
Rule 61    tag -> identifier COLON typeIdentifier
Rule 62    tag -> typeIdentifier
Rule 63    typeIdentifier -> identifier
Rule 64    typeIdentifier -> INTEGER
Rule 65    typeIdentifier -> REAL
Rule 66    typeIdentifier -> BOOLEAN
Rule 67    typeIdentifier -> CHAR
Rule 68    typeIdentifier -> STRING
Rule 69    variantList -> variantList SEMI variant
Rule 70    variantList -> variant
Rule 71    variant -> constList COLON LPAREN fieldList RPAREN
Rule 72    constList -> constList COMMA constant
Rule 73    constList -> constant
Rule 74    setType -> SET OF baseType
Rule 75    baseType -> simpleType
Rule 76    variableDeclarationBlock -> VAR variableDeclarationList SEMI
Rule 77    variableDeclarationList -> variableDeclarationList SEMI variableDeclaration
Rule 78    variableDeclarationList -> variableDeclaration
Rule 79    variableDeclaration -> identifierList COLON type_
Rule 80    procedureAndFunctionDeclarationBlock -> procedureDeclaration
Rule 81    procedureAndFunctionDeclarationBlock -> functionDeclaration
Rule 82    procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block
Rule 83    formalParameterList_opt -> formalParameterList
Rule 84    formalParameterList_opt -> empty
Rule 85    formalParameterList -> LPAREN formalParameterSectionList RPAREN
Rule 86    formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection
Rule 87    formalParameterSectionList -> formalParameterSection
Rule 88    formalParameterSection -> parameterGroup
Rule 89    formalParameterSection -> VAR parameterGroup
Rule 90    formalParameterSection -> FUNCTION parameterGroup
Rule 91    formalParameterSection -> PROCEDURE parameterGroup
Rule 92    parameterGroup -> identifierList COLON typeIdentifier
Rule 93    functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block
Rule 94    resultType -> typeIdentifier
Rule 95    compoundStatement -> BEGIN statements END
Rule 96    statements -> statements SEMI statement
Rule 97    statements -> statement
Rule 98    statement -> simpleStatement
Rule 99    statement -> structuredStatement
Rule 100   simpleStatement -> assignmentStatement
Rule 101   simpleStatement -> procedureStatement
Rule 102   simpleStatement -> emptyStatement_
Rule 103   assignmentStatement -> variable ASSIGN expression
Rule 104   variable -> identifier
Rule 105   variable -> indexedVariable
Rule 106   indexedVariable -> identifier LBRACK expression RBRACK
Rule 107   expression -> simpleExpression
Rule 108   expression -> simpleExpression relationalOperator simpleExpression
Rule 109   relationalOperator -> EQUAL
Rule 110   relationalOperator -> NOT_EQUAL
Rule 111   relationalOperator -> LT
Rule 112   relationalOperator -> LE
Rule 113   relationalOperator -> GT
Rule 114   relationalOperator -> GE
Rule 115   relationalOperator -> IN
Rule 116   simpleExpression -> term
Rule 117   simpleExpression -> sign term
Rule 118   simpleExpression -> simpleExpression additiveOperator term
Rule 119   additiveOperator -> PLUS
Rule 120   additiveOperator -> MINUS
Rule 121   additiveOperator -> OR
Rule 122   term -> factor
Rule 123   term -> term multiplicativeOperator factor
Rule 124   multiplicativeOperator -> STAR
Rule 125   multiplicativeOperator -> SLASH
Rule 126   multiplicativeOperator -> DIV
Rule 127   multiplicativeOperator -> MOD
Rule 128   multiplicativeOperator -> AND
Rule 129   factor -> variable
Rule 130   factor -> unsignedConstant
Rule 131   factor -> LPAREN expression RPAREN
Rule 132   unsignedConstant -> unsignedNumber
Rule 133   unsignedConstant -> string
Rule 134   unsignedConstant -> NIL
Rule 135   unsignedConstant -> TRUE
Rule 136   unsignedConstant -> FALSE
Rule 137   procedureStatement -> identifier
Rule 138   procedureStatement -> identifier LPAREN expressionList RPAREN
Rule 139   expressionList -> expressionList COMMA expression
Rule 140   expressionList -> expressionList COMMA formattedExpression
Rule 141   expressionList -> expression
Rule 142   expressionList -> formattedExpression
Rule 143   formattedExpression -> variable COLON expression COLON expression
Rule 144   formattedExpression -> variable COLON expression
Rule 145   emptyStatement_ -> <empty>
Rule 146   structuredStatement -> compoundStatement
Rule 147   structuredStatement -> conditionalStatement
Rule 148   structuredStatement -> loopStatement
Rule 149   loopStatement -> forStatement
Rule 150   loopStatement -> whileStatement
Rule 151   loopStatement -> repeatStatement
Rule 152   forStatement -> FOR identifier ASSIGN expression TO expression DO statement
Rule 153   forStatement -> FOR identifier ASSIGN expression DOWNTO expression DO statement
Rule 154   whileStatement -> WHILE expression DO statement
Rule 155   repeatStatement -> REPEAT statements UNTIL expression
Rule 156   conditionalStatement -> ifStatement
Rule 157   ifStatement -> IF expression THEN statement
Rule 158   ifStatement -> IF expression THEN statement ELSE statement
Rule 159   empty -> <empty>

Terminals, with rules where they appear

AND                  : 128
ARRAY                : 47
ASSIGN               : 103 152 153
AT                   : 
BEGIN                : 95
BOOLEAN              : 66
CASE                 : 60
CHAR                 : 67
CHR                  : 28
COLON                : 59 61 71 79 92 93 143 143 144
COMMA                : 39 48 72 139 140
CONST                : 11
DIV                  : 126
DO                   : 152 153 154
DOT                  : 1
DOTDOT               : 41
DOWNTO               : 153
ELSE                 : 158
END                  : 52 95
EQUAL                : 14 32 109
EXTERNAL             : 
FALSE                : 136
FILE                 : 
FOR                  : 152 153
FUNCTION             : 90 93
GE                   : 114
GOTO                 : 
GT                   : 113
IDENT                : 3 42
IF                   : 157 158
IMPLEMENTATION       : 
IN                   : 115
INTEGER              : 64
INTERFACE            : 
LABEL                : 
LBRACK               : 43 47 106
LBRACK2              : 
LCURLY               : 
LE                   : 112
LPAREN               : 28 38 71 85 131 138
LT                   : 111
MINUS                : 26 120
MOD                  : 127
NIL                  : 134
NOT                  : 
NOT_EQUAL            : 110
NUM_INT              : 23
NUM_REAL             : 24
OF                   : 47 60 74
OR                   : 121
PACKED               : 
PLUS                 : 25 119
POINTER              : 
PROCEDURE            : 82 91
PROGRAM              : 2
RBRACK               : 43 47 106
RBRACK2              : 
RCURLY               : 
REAL                 : 65
RECORD               : 52
REPEAT               : 155
RPAREN               : 28 38 71 85 131 138
SEMI                 : 2 12 13 30 31 54 57 69 76 77 82 86 93 96
SET                  : 74
SLASH                : 125
STAR                 : 124
STRING               : 43 68
STRING_LITERAL       : 27
THEN                 : 157 158
TO                   : 152
TRUE                 : 135
TYPE                 : 29
UNIT                 : 
UNTIL                : 155
VAR                  : 76 89
WHILE                : 154
WITH                 : 
error                : 

Nonterminals, with rules where they appear

additiveOperator     : 118
arrayType            : 37 44
assignmentStatement  : 100
baseType             : 74
block                : 1 82 93
compoundStatement    : 4 146
conditionalStatement : 147
constList            : 71 72
constant             : 14 72 73
constantChr          : 20
constantDefinition   : 12 13
constantDefinitionBlock : 7
constantDefinitionList : 11 12
declaration          : 5
declarations         : 4 5
empty                : 6 84
emptyStatement_      : 102
expression           : 103 106 131 139 141 143 143 144 152 152 153 153 154 155 157 158
expressionList       : 138 139 140
factor               : 122 123
fieldList            : 52 71
fixedPart            : 53 54
forStatement         : 149
formalParameterList  : 83
formalParameterList_opt : 82 93
formalParameterSection : 86 87
formalParameterSectionList : 85 86
formattedExpression  : 140 142
functionDeclaration  : 81
identifier           : 2 14 17 18 32 39 40 61 63 82 93 104 106 137 138 152 153
identifierList       : 38 39 59 79 92
identifierType       : 51
ifStatement          : 156
indexType            : 48 49
indexedVariable      : 105
loopStatement        : 148
multiplicativeOperator : 123
parameterGroup       : 88 89 90 91
procedureAndFunctionDeclarationBlock : 10
procedureDeclaration : 80
procedureStatement   : 101
program              : 0
programHeading       : 1
recordSection        : 57 58
recordSectionList    : 56 57
recordType           : 45
relationalOperator   : 108
repeatStatement      : 151
resultType           : 93
scalarType           : 33
setType              : 46
sign                 : 16 18 117
simpleExpression     : 107 108 108 118
simpleStatement      : 98
simpleType           : 50 75
statement            : 96 97 152 153 154 157 158 158
statements           : 95 96 155
string               : 19 133
stringType           : 36
structuredStatement  : 99
structuredType       : 
subrangeType         : 34 47
tag                  : 60
term                 : 116 117 118 123
typeDeclarationBlock : 8
typeDefinition       : 30 31
typeDefinitionList   : 29 30
typeIdentifier       : 35 47 61 62 92 94
typeList             : 48
type_                : 32 59 79
unsignedConstant     : 130
unsignedInteger      : 21 28 41 41 43
unsignedNumber       : 15 16 132
unsignedReal         : 22
variable             : 103 129 143 144
variableDeclaration  : 77 78
variableDeclarationBlock : 9
variableDeclarationList : 76 77
variant              : 69 70
variantList          : 60 69
variantPart          : 54 55
whileStatement       : 150

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programHeading block DOT
    (2) programHeading -> . PROGRAM identifier SEMI

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programHeading                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programHeading . block DOT
    (4) block -> . declarations compoundStatement
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (159) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration
    (82) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (93) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 159 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    block                          shift and go to state 4
    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 3

    (2) programHeading -> PROGRAM . identifier SEMI
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 19

state 4

    (1) program -> programHeading block . DOT

    DOT             shift and go to state 21


state 5

    (4) block -> declarations . compoundStatement
    (95) compoundStatement -> . BEGIN statements END

    BEGIN           shift and go to state 23

    compoundStatement              shift and go to state 22

state 6

    (5) declarations -> declaration . declarations
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (159) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration
    (82) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (93) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 159 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    declaration                    shift and go to state 6
    declarations                   shift and go to state 24
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 7

    (6) declarations -> empty .

    BEGIN           reduce using rule 6 (declarations -> empty .)


state 8

    (7) declaration -> constantDefinitionBlock .

    CONST           reduce using rule 7 (declaration -> constantDefinitionBlock .)
    TYPE            reduce using rule 7 (declaration -> constantDefinitionBlock .)
    VAR             reduce using rule 7 (declaration -> constantDefinitionBlock .)
    PROCEDURE       reduce using rule 7 (declaration -> constantDefinitionBlock .)
    FUNCTION        reduce using rule 7 (declaration -> constantDefinitionBlock .)
    BEGIN           reduce using rule 7 (declaration -> constantDefinitionBlock .)


state 9

    (8) declaration -> typeDeclarationBlock .

    CONST           reduce using rule 8 (declaration -> typeDeclarationBlock .)
    TYPE            reduce using rule 8 (declaration -> typeDeclarationBlock .)
    VAR             reduce using rule 8 (declaration -> typeDeclarationBlock .)
    PROCEDURE       reduce using rule 8 (declaration -> typeDeclarationBlock .)
    FUNCTION        reduce using rule 8 (declaration -> typeDeclarationBlock .)
    BEGIN           reduce using rule 8 (declaration -> typeDeclarationBlock .)


state 10

    (9) declaration -> variableDeclarationBlock .

    CONST           reduce using rule 9 (declaration -> variableDeclarationBlock .)
    TYPE            reduce using rule 9 (declaration -> variableDeclarationBlock .)
    VAR             reduce using rule 9 (declaration -> variableDeclarationBlock .)
    PROCEDURE       reduce using rule 9 (declaration -> variableDeclarationBlock .)
    FUNCTION        reduce using rule 9 (declaration -> variableDeclarationBlock .)
    BEGIN           reduce using rule 9 (declaration -> variableDeclarationBlock .)


state 11

    (10) declaration -> procedureAndFunctionDeclarationBlock .

    CONST           reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    TYPE            reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    VAR             reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    PROCEDURE       reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    FUNCTION        reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    BEGIN           reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)


state 12

    (11) constantDefinitionBlock -> CONST . constantDefinitionList
    (12) constantDefinitionList -> . constantDefinitionList constantDefinition SEMI
    (13) constantDefinitionList -> . constantDefinition SEMI
    (14) constantDefinition -> . identifier EQUAL constant
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    constantDefinitionList         shift and go to state 25
    constantDefinition             shift and go to state 26
    identifier                     shift and go to state 27

state 13

    (29) typeDeclarationBlock -> TYPE . typeDefinitionList
    (30) typeDefinitionList -> . typeDefinitionList typeDefinition SEMI
    (31) typeDefinitionList -> . typeDefinition SEMI
    (32) typeDefinition -> . identifier EQUAL type_
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    typeDefinitionList             shift and go to state 28
    typeDefinition                 shift and go to state 29
    identifier                     shift and go to state 30

state 14

    (76) variableDeclarationBlock -> VAR . variableDeclarationList SEMI
    (77) variableDeclarationList -> . variableDeclarationList SEMI variableDeclaration
    (78) variableDeclarationList -> . variableDeclaration
    (79) variableDeclaration -> . identifierList COLON type_
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    variableDeclarationList        shift and go to state 31
    variableDeclaration            shift and go to state 32
    identifierList                 shift and go to state 33
    identifier                     shift and go to state 34

state 15

    (80) procedureAndFunctionDeclarationBlock -> procedureDeclaration .

    CONST           reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration .)
    TYPE            reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration .)
    VAR             reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration .)
    PROCEDURE       reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration .)
    FUNCTION        reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration .)
    BEGIN           reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration .)


state 16

    (81) procedureAndFunctionDeclarationBlock -> functionDeclaration .

    CONST           reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration .)
    TYPE            reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration .)
    VAR             reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration .)
    PROCEDURE       reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration .)
    FUNCTION        reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration .)
    BEGIN           reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration .)


state 17

    (82) procedureDeclaration -> PROCEDURE . identifier formalParameterList_opt SEMI block
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 35

state 18

    (93) functionDeclaration -> FUNCTION . identifier formalParameterList_opt COLON resultType SEMI block
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 36

state 19

    (2) programHeading -> PROGRAM identifier . SEMI

    SEMI            shift and go to state 37


state 20

    (3) identifier -> IDENT .

    SEMI            reduce using rule 3 (identifier -> IDENT .)
    EQUAL           reduce using rule 3 (identifier -> IDENT .)
    COLON           reduce using rule 3 (identifier -> IDENT .)
    COMMA           reduce using rule 3 (identifier -> IDENT .)
    LPAREN          reduce using rule 3 (identifier -> IDENT .)
    LBRACK          reduce using rule 3 (identifier -> IDENT .)
    END             reduce using rule 3 (identifier -> IDENT .)
    ASSIGN          reduce using rule 3 (identifier -> IDENT .)
    STAR            reduce using rule 3 (identifier -> IDENT .)
    SLASH           reduce using rule 3 (identifier -> IDENT .)
    DIV             reduce using rule 3 (identifier -> IDENT .)
    MOD             reduce using rule 3 (identifier -> IDENT .)
    AND             reduce using rule 3 (identifier -> IDENT .)
    NOT_EQUAL       reduce using rule 3 (identifier -> IDENT .)
    LT              reduce using rule 3 (identifier -> IDENT .)
    LE              reduce using rule 3 (identifier -> IDENT .)
    GT              reduce using rule 3 (identifier -> IDENT .)
    GE              reduce using rule 3 (identifier -> IDENT .)
    IN              reduce using rule 3 (identifier -> IDENT .)
    PLUS            reduce using rule 3 (identifier -> IDENT .)
    MINUS           reduce using rule 3 (identifier -> IDENT .)
    OR              reduce using rule 3 (identifier -> IDENT .)
    THEN            reduce using rule 3 (identifier -> IDENT .)
    DO              reduce using rule 3 (identifier -> IDENT .)
    UNTIL           reduce using rule 3 (identifier -> IDENT .)
    RPAREN          reduce using rule 3 (identifier -> IDENT .)
    ELSE            reduce using rule 3 (identifier -> IDENT .)
    RBRACK          reduce using rule 3 (identifier -> IDENT .)
    TO              reduce using rule 3 (identifier -> IDENT .)
    DOWNTO          reduce using rule 3 (identifier -> IDENT .)


state 21

    (1) program -> programHeading block DOT .

    $end            reduce using rule 1 (program -> programHeading block DOT .)


state 22

    (4) block -> declarations compoundStatement .

    DOT             reduce using rule 4 (block -> declarations compoundStatement .)
    CONST           reduce using rule 4 (block -> declarations compoundStatement .)
    TYPE            reduce using rule 4 (block -> declarations compoundStatement .)
    VAR             reduce using rule 4 (block -> declarations compoundStatement .)
    PROCEDURE       reduce using rule 4 (block -> declarations compoundStatement .)
    FUNCTION        reduce using rule 4 (block -> declarations compoundStatement .)
    BEGIN           reduce using rule 4 (block -> declarations compoundStatement .)


state 23

    (95) compoundStatement -> BEGIN . statements END
    (96) statements -> . statements SEMI statement
    (97) statements -> . statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    END             reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    statements                     shift and go to state 38
    statement                      shift and go to state 39
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    identifier                     shift and go to state 49
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 24

    (5) declarations -> declaration declarations .

    BEGIN           reduce using rule 5 (declarations -> declaration declarations .)


state 25

    (11) constantDefinitionBlock -> CONST constantDefinitionList .
    (12) constantDefinitionList -> constantDefinitionList . constantDefinition SEMI
    (14) constantDefinition -> . identifier EQUAL constant
    (3) identifier -> . IDENT

    CONST           reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    TYPE            reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    VAR             reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    PROCEDURE       reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    FUNCTION        reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    BEGIN           reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    IDENT           shift and go to state 20

    constantDefinition             shift and go to state 59
    identifier                     shift and go to state 27

state 26

    (13) constantDefinitionList -> constantDefinition . SEMI

    SEMI            shift and go to state 60


state 27

    (14) constantDefinition -> identifier . EQUAL constant

    EQUAL           shift and go to state 61


state 28

    (29) typeDeclarationBlock -> TYPE typeDefinitionList .
    (30) typeDefinitionList -> typeDefinitionList . typeDefinition SEMI
    (32) typeDefinition -> . identifier EQUAL type_
    (3) identifier -> . IDENT

    CONST           reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    TYPE            reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    VAR             reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    PROCEDURE       reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    FUNCTION        reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    BEGIN           reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    IDENT           shift and go to state 20

    typeDefinition                 shift and go to state 62
    identifier                     shift and go to state 30

state 29

    (31) typeDefinitionList -> typeDefinition . SEMI

    SEMI            shift and go to state 63


state 30

    (32) typeDefinition -> identifier . EQUAL type_

    EQUAL           shift and go to state 64


state 31

    (76) variableDeclarationBlock -> VAR variableDeclarationList . SEMI
    (77) variableDeclarationList -> variableDeclarationList . SEMI variableDeclaration

    SEMI            shift and go to state 65


state 32

    (78) variableDeclarationList -> variableDeclaration .

    SEMI            reduce using rule 78 (variableDeclarationList -> variableDeclaration .)


state 33

    (79) variableDeclaration -> identifierList . COLON type_
    (39) identifierList -> identifierList . COMMA identifier

    COLON           shift and go to state 66
    COMMA           shift and go to state 67


state 34

    (40) identifierList -> identifier .

    COLON           reduce using rule 40 (identifierList -> identifier .)
    COMMA           reduce using rule 40 (identifierList -> identifier .)
    RPAREN          reduce using rule 40 (identifierList -> identifier .)


state 35

    (82) procedureDeclaration -> PROCEDURE identifier . formalParameterList_opt SEMI block
    (83) formalParameterList_opt -> . formalParameterList
    (84) formalParameterList_opt -> . empty
    (85) formalParameterList -> . LPAREN formalParameterSectionList RPAREN
    (159) empty -> .

    LPAREN          shift and go to state 71
    SEMI            reduce using rule 159 (empty -> .)

    formalParameterList_opt        shift and go to state 68
    formalParameterList            shift and go to state 69
    empty                          shift and go to state 70

state 36

    (93) functionDeclaration -> FUNCTION identifier . formalParameterList_opt COLON resultType SEMI block
    (83) formalParameterList_opt -> . formalParameterList
    (84) formalParameterList_opt -> . empty
    (85) formalParameterList -> . LPAREN formalParameterSectionList RPAREN
    (159) empty -> .

    LPAREN          shift and go to state 71
    COLON           reduce using rule 159 (empty -> .)

    formalParameterList_opt        shift and go to state 72
    formalParameterList            shift and go to state 69
    empty                          shift and go to state 70

state 37

    (2) programHeading -> PROGRAM identifier SEMI .

    CONST           reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    TYPE            reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    VAR             reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    PROCEDURE       reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    FUNCTION        reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    BEGIN           reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)


state 38

    (95) compoundStatement -> BEGIN statements . END
    (96) statements -> statements . SEMI statement

    END             shift and go to state 73
    SEMI            shift and go to state 74


state 39

    (97) statements -> statement .

    END             reduce using rule 97 (statements -> statement .)
    SEMI            reduce using rule 97 (statements -> statement .)
    UNTIL           reduce using rule 97 (statements -> statement .)


state 40

    (98) statement -> simpleStatement .

    END             reduce using rule 98 (statement -> simpleStatement .)
    SEMI            reduce using rule 98 (statement -> simpleStatement .)
    UNTIL           reduce using rule 98 (statement -> simpleStatement .)
    ELSE            reduce using rule 98 (statement -> simpleStatement .)


state 41

    (99) statement -> structuredStatement .

    END             reduce using rule 99 (statement -> structuredStatement .)
    SEMI            reduce using rule 99 (statement -> structuredStatement .)
    UNTIL           reduce using rule 99 (statement -> structuredStatement .)
    ELSE            reduce using rule 99 (statement -> structuredStatement .)


state 42

    (100) simpleStatement -> assignmentStatement .

    END             reduce using rule 100 (simpleStatement -> assignmentStatement .)
    SEMI            reduce using rule 100 (simpleStatement -> assignmentStatement .)
    UNTIL           reduce using rule 100 (simpleStatement -> assignmentStatement .)
    ELSE            reduce using rule 100 (simpleStatement -> assignmentStatement .)


state 43

    (101) simpleStatement -> procedureStatement .

    END             reduce using rule 101 (simpleStatement -> procedureStatement .)
    SEMI            reduce using rule 101 (simpleStatement -> procedureStatement .)
    UNTIL           reduce using rule 101 (simpleStatement -> procedureStatement .)
    ELSE            reduce using rule 101 (simpleStatement -> procedureStatement .)


state 44

    (102) simpleStatement -> emptyStatement_ .

    END             reduce using rule 102 (simpleStatement -> emptyStatement_ .)
    SEMI            reduce using rule 102 (simpleStatement -> emptyStatement_ .)
    UNTIL           reduce using rule 102 (simpleStatement -> emptyStatement_ .)
    ELSE            reduce using rule 102 (simpleStatement -> emptyStatement_ .)


state 45

    (146) structuredStatement -> compoundStatement .

    END             reduce using rule 146 (structuredStatement -> compoundStatement .)
    SEMI            reduce using rule 146 (structuredStatement -> compoundStatement .)
    UNTIL           reduce using rule 146 (structuredStatement -> compoundStatement .)
    ELSE            reduce using rule 146 (structuredStatement -> compoundStatement .)


state 46

    (147) structuredStatement -> conditionalStatement .

    END             reduce using rule 147 (structuredStatement -> conditionalStatement .)
    SEMI            reduce using rule 147 (structuredStatement -> conditionalStatement .)
    UNTIL           reduce using rule 147 (structuredStatement -> conditionalStatement .)
    ELSE            reduce using rule 147 (structuredStatement -> conditionalStatement .)


state 47

    (148) structuredStatement -> loopStatement .

    END             reduce using rule 148 (structuredStatement -> loopStatement .)
    SEMI            reduce using rule 148 (structuredStatement -> loopStatement .)
    UNTIL           reduce using rule 148 (structuredStatement -> loopStatement .)
    ELSE            reduce using rule 148 (structuredStatement -> loopStatement .)


state 48

    (103) assignmentStatement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 75


state 49

    (137) procedureStatement -> identifier .
    (138) procedureStatement -> identifier . LPAREN expressionList RPAREN
    (104) variable -> identifier .
    (106) indexedVariable -> identifier . LBRACK expression RBRACK

    END             reduce using rule 137 (procedureStatement -> identifier .)
    SEMI            reduce using rule 137 (procedureStatement -> identifier .)
    UNTIL           reduce using rule 137 (procedureStatement -> identifier .)
    ELSE            reduce using rule 137 (procedureStatement -> identifier .)
    LPAREN          shift and go to state 76
    ASSIGN          reduce using rule 104 (variable -> identifier .)
    LBRACK          shift and go to state 77


state 50

    (156) conditionalStatement -> ifStatement .

    END             reduce using rule 156 (conditionalStatement -> ifStatement .)
    SEMI            reduce using rule 156 (conditionalStatement -> ifStatement .)
    UNTIL           reduce using rule 156 (conditionalStatement -> ifStatement .)
    ELSE            reduce using rule 156 (conditionalStatement -> ifStatement .)


state 51

    (149) loopStatement -> forStatement .

    END             reduce using rule 149 (loopStatement -> forStatement .)
    SEMI            reduce using rule 149 (loopStatement -> forStatement .)
    UNTIL           reduce using rule 149 (loopStatement -> forStatement .)
    ELSE            reduce using rule 149 (loopStatement -> forStatement .)


state 52

    (150) loopStatement -> whileStatement .

    END             reduce using rule 150 (loopStatement -> whileStatement .)
    SEMI            reduce using rule 150 (loopStatement -> whileStatement .)
    UNTIL           reduce using rule 150 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 150 (loopStatement -> whileStatement .)


state 53

    (151) loopStatement -> repeatStatement .

    END             reduce using rule 151 (loopStatement -> repeatStatement .)
    SEMI            reduce using rule 151 (loopStatement -> repeatStatement .)
    UNTIL           reduce using rule 151 (loopStatement -> repeatStatement .)
    ELSE            reduce using rule 151 (loopStatement -> repeatStatement .)


state 54

    (105) variable -> indexedVariable .

    ASSIGN          reduce using rule 105 (variable -> indexedVariable .)
    STAR            reduce using rule 105 (variable -> indexedVariable .)
    SLASH           reduce using rule 105 (variable -> indexedVariable .)
    DIV             reduce using rule 105 (variable -> indexedVariable .)
    MOD             reduce using rule 105 (variable -> indexedVariable .)
    AND             reduce using rule 105 (variable -> indexedVariable .)
    EQUAL           reduce using rule 105 (variable -> indexedVariable .)
    NOT_EQUAL       reduce using rule 105 (variable -> indexedVariable .)
    LT              reduce using rule 105 (variable -> indexedVariable .)
    LE              reduce using rule 105 (variable -> indexedVariable .)
    GT              reduce using rule 105 (variable -> indexedVariable .)
    GE              reduce using rule 105 (variable -> indexedVariable .)
    IN              reduce using rule 105 (variable -> indexedVariable .)
    PLUS            reduce using rule 105 (variable -> indexedVariable .)
    MINUS           reduce using rule 105 (variable -> indexedVariable .)
    OR              reduce using rule 105 (variable -> indexedVariable .)
    THEN            reduce using rule 105 (variable -> indexedVariable .)
    DO              reduce using rule 105 (variable -> indexedVariable .)
    END             reduce using rule 105 (variable -> indexedVariable .)
    SEMI            reduce using rule 105 (variable -> indexedVariable .)
    UNTIL           reduce using rule 105 (variable -> indexedVariable .)
    ELSE            reduce using rule 105 (variable -> indexedVariable .)
    COLON           reduce using rule 105 (variable -> indexedVariable .)
    RPAREN          reduce using rule 105 (variable -> indexedVariable .)
    COMMA           reduce using rule 105 (variable -> indexedVariable .)
    RBRACK          reduce using rule 105 (variable -> indexedVariable .)
    TO              reduce using rule 105 (variable -> indexedVariable .)
    DOWNTO          reduce using rule 105 (variable -> indexedVariable .)


state 55

    (157) ifStatement -> IF . expression THEN statement
    (158) ifStatement -> IF . expression THEN statement ELSE statement
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    expression                     shift and go to state 78
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 56

    (152) forStatement -> FOR . identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> FOR . identifier ASSIGN expression DOWNTO expression DO statement
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 99

state 57

    (154) whileStatement -> WHILE . expression DO statement
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    expression                     shift and go to state 100
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 58

    (155) repeatStatement -> REPEAT . statements UNTIL expression
    (96) statements -> . statements SEMI statement
    (97) statements -> . statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    UNTIL           reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    statements                     shift and go to state 101
    statement                      shift and go to state 39
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    identifier                     shift and go to state 49
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 59

    (12) constantDefinitionList -> constantDefinitionList constantDefinition . SEMI

    SEMI            shift and go to state 102


state 60

    (13) constantDefinitionList -> constantDefinition SEMI .

    IDENT           reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    CONST           reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    TYPE            reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    VAR             reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    PROCEDURE       reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    FUNCTION        reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    BEGIN           reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)


state 61

    (14) constantDefinition -> identifier EQUAL . constant
    (15) constant -> . unsignedNumber
    (16) constant -> . sign unsignedNumber
    (17) constant -> . identifier
    (18) constant -> . sign identifier
    (19) constant -> . string
    (20) constant -> . constantChr
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (3) identifier -> . IDENT
    (27) string -> . STRING_LITERAL
    (28) constantChr -> . CHR LPAREN unsignedInteger RPAREN
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    CHR             shift and go to state 109
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    identifier                     shift and go to state 103
    constant                       shift and go to state 104
    unsignedNumber                 shift and go to state 105
    sign                           shift and go to state 106
    string                         shift and go to state 107
    constantChr                    shift and go to state 108
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 62

    (30) typeDefinitionList -> typeDefinitionList typeDefinition . SEMI

    SEMI            shift and go to state 110


state 63

    (31) typeDefinitionList -> typeDefinition SEMI .

    IDENT           reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    CONST           reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    TYPE            reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    VAR             reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    PROCEDURE       reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    FUNCTION        reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    BEGIN           reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)


state 64

    (32) typeDefinition -> identifier EQUAL . type_
    (33) type_ -> . scalarType
    (34) type_ -> . subrangeType
    (35) type_ -> . typeIdentifier
    (36) type_ -> . stringType
    (37) type_ -> . arrayType
    (38) scalarType -> . LPAREN identifierList RPAREN
    (41) subrangeType -> . unsignedInteger DOTDOT unsignedInteger
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (43) stringType -> . STRING LBRACK unsignedInteger RBRACK
    (47) arrayType -> . ARRAY LBRACK subrangeType RBRACK OF typeIdentifier
    (23) unsignedInteger -> . NUM_INT
    (3) identifier -> . IDENT

    LPAREN          shift and go to state 118
    INTEGER         shift and go to state 120
    REAL            shift and go to state 121
    BOOLEAN         shift and go to state 122
    CHAR            shift and go to state 123
    STRING          shift and go to state 124
    ARRAY           shift and go to state 125
    NUM_INT         shift and go to state 97
    IDENT           shift and go to state 20

    identifier                     shift and go to state 111
    type_                          shift and go to state 112
    scalarType                     shift and go to state 113
    subrangeType                   shift and go to state 114
    typeIdentifier                 shift and go to state 115
    stringType                     shift and go to state 116
    arrayType                      shift and go to state 117
    unsignedInteger                shift and go to state 119

state 65

    (76) variableDeclarationBlock -> VAR variableDeclarationList SEMI .
    (77) variableDeclarationList -> variableDeclarationList SEMI . variableDeclaration
    (79) variableDeclaration -> . identifierList COLON type_
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    CONST           reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    TYPE            reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    VAR             reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    PROCEDURE       reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    FUNCTION        reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    BEGIN           reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    IDENT           shift and go to state 20

    variableDeclaration            shift and go to state 126
    identifierList                 shift and go to state 33
    identifier                     shift and go to state 34

state 66

    (79) variableDeclaration -> identifierList COLON . type_
    (33) type_ -> . scalarType
    (34) type_ -> . subrangeType
    (35) type_ -> . typeIdentifier
    (36) type_ -> . stringType
    (37) type_ -> . arrayType
    (38) scalarType -> . LPAREN identifierList RPAREN
    (41) subrangeType -> . unsignedInteger DOTDOT unsignedInteger
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (43) stringType -> . STRING LBRACK unsignedInteger RBRACK
    (47) arrayType -> . ARRAY LBRACK subrangeType RBRACK OF typeIdentifier
    (23) unsignedInteger -> . NUM_INT
    (3) identifier -> . IDENT

    LPAREN          shift and go to state 118
    INTEGER         shift and go to state 120
    REAL            shift and go to state 121
    BOOLEAN         shift and go to state 122
    CHAR            shift and go to state 123
    STRING          shift and go to state 124
    ARRAY           shift and go to state 125
    NUM_INT         shift and go to state 97
    IDENT           shift and go to state 20

    type_                          shift and go to state 127
    scalarType                     shift and go to state 113
    subrangeType                   shift and go to state 114
    typeIdentifier                 shift and go to state 115
    stringType                     shift and go to state 116
    arrayType                      shift and go to state 117
    unsignedInteger                shift and go to state 119
    identifier                     shift and go to state 111

state 67

    (39) identifierList -> identifierList COMMA . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 128

state 68

    (82) procedureDeclaration -> PROCEDURE identifier formalParameterList_opt . SEMI block

    SEMI            shift and go to state 129


state 69

    (83) formalParameterList_opt -> formalParameterList .

    SEMI            reduce using rule 83 (formalParameterList_opt -> formalParameterList .)
    COLON           reduce using rule 83 (formalParameterList_opt -> formalParameterList .)


state 70

    (84) formalParameterList_opt -> empty .

    SEMI            reduce using rule 84 (formalParameterList_opt -> empty .)
    COLON           reduce using rule 84 (formalParameterList_opt -> empty .)


state 71

    (85) formalParameterList -> LPAREN . formalParameterSectionList RPAREN
    (86) formalParameterSectionList -> . formalParameterSectionList SEMI formalParameterSection
    (87) formalParameterSectionList -> . formalParameterSection
    (88) formalParameterSection -> . parameterGroup
    (89) formalParameterSection -> . VAR parameterGroup
    (90) formalParameterSection -> . FUNCTION parameterGroup
    (91) formalParameterSection -> . PROCEDURE parameterGroup
    (92) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    VAR             shift and go to state 133
    FUNCTION        shift and go to state 134
    PROCEDURE       shift and go to state 135
    IDENT           shift and go to state 20

    formalParameterSectionList     shift and go to state 130
    formalParameterSection         shift and go to state 131
    parameterGroup                 shift and go to state 132
    identifierList                 shift and go to state 136
    identifier                     shift and go to state 34

state 72

    (93) functionDeclaration -> FUNCTION identifier formalParameterList_opt . COLON resultType SEMI block

    COLON           shift and go to state 137


state 73

    (95) compoundStatement -> BEGIN statements END .

    DOT             reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    CONST           reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    TYPE            reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    VAR             reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    PROCEDURE       reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    FUNCTION        reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    BEGIN           reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    END             reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    SEMI            reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    UNTIL           reduce using rule 95 (compoundStatement -> BEGIN statements END .)
    ELSE            reduce using rule 95 (compoundStatement -> BEGIN statements END .)


state 74

    (96) statements -> statements SEMI . statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    END             reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    UNTIL           reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    statement                      shift and go to state 138
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    identifier                     shift and go to state 49
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 75

    (103) assignmentStatement -> variable ASSIGN . expression
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    variable                       shift and go to state 85
    expression                     shift and go to state 139
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 76

    (138) procedureStatement -> identifier LPAREN . expressionList RPAREN
    (139) expressionList -> . expressionList COMMA expression
    (140) expressionList -> . expressionList COMMA formattedExpression
    (141) expressionList -> . expression
    (142) expressionList -> . formattedExpression
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (143) formattedExpression -> . variable COLON expression COLON expression
    (144) formattedExpression -> . variable COLON expression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    IDENT           shift and go to state 20
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    identifier                     shift and go to state 88
    expressionList                 shift and go to state 140
    expression                     shift and go to state 141
    formattedExpression            shift and go to state 142
    simpleExpression               shift and go to state 79
    variable                       shift and go to state 143
    term                           shift and go to state 80
    sign                           shift and go to state 81
    indexedVariable                shift and go to state 54
    factor                         shift and go to state 82
    unsignedConstant               shift and go to state 86
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 77

    (106) indexedVariable -> identifier LBRACK . expression RBRACK
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    identifier                     shift and go to state 88
    expression                     shift and go to state 144
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 78

    (157) ifStatement -> IF expression . THEN statement
    (158) ifStatement -> IF expression . THEN statement ELSE statement

    THEN            shift and go to state 145


state 79

    (107) expression -> simpleExpression .
    (108) expression -> simpleExpression . relationalOperator simpleExpression
    (118) simpleExpression -> simpleExpression . additiveOperator term
    (109) relationalOperator -> . EQUAL
    (110) relationalOperator -> . NOT_EQUAL
    (111) relationalOperator -> . LT
    (112) relationalOperator -> . LE
    (113) relationalOperator -> . GT
    (114) relationalOperator -> . GE
    (115) relationalOperator -> . IN
    (119) additiveOperator -> . PLUS
    (120) additiveOperator -> . MINUS
    (121) additiveOperator -> . OR

    THEN            reduce using rule 107 (expression -> simpleExpression .)
    DO              reduce using rule 107 (expression -> simpleExpression .)
    END             reduce using rule 107 (expression -> simpleExpression .)
    SEMI            reduce using rule 107 (expression -> simpleExpression .)
    UNTIL           reduce using rule 107 (expression -> simpleExpression .)
    ELSE            reduce using rule 107 (expression -> simpleExpression .)
    RPAREN          reduce using rule 107 (expression -> simpleExpression .)
    COMMA           reduce using rule 107 (expression -> simpleExpression .)
    RBRACK          reduce using rule 107 (expression -> simpleExpression .)
    TO              reduce using rule 107 (expression -> simpleExpression .)
    DOWNTO          reduce using rule 107 (expression -> simpleExpression .)
    COLON           reduce using rule 107 (expression -> simpleExpression .)
    EQUAL           shift and go to state 148
    NOT_EQUAL       shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    IN              shift and go to state 154
    PLUS            shift and go to state 155
    MINUS           shift and go to state 156
    OR              shift and go to state 157

    relationalOperator             shift and go to state 146
    additiveOperator               shift and go to state 147

state 80

    (116) simpleExpression -> term .
    (123) term -> term . multiplicativeOperator factor
    (124) multiplicativeOperator -> . STAR
    (125) multiplicativeOperator -> . SLASH
    (126) multiplicativeOperator -> . DIV
    (127) multiplicativeOperator -> . MOD
    (128) multiplicativeOperator -> . AND

    EQUAL           reduce using rule 116 (simpleExpression -> term .)
    NOT_EQUAL       reduce using rule 116 (simpleExpression -> term .)
    LT              reduce using rule 116 (simpleExpression -> term .)
    LE              reduce using rule 116 (simpleExpression -> term .)
    GT              reduce using rule 116 (simpleExpression -> term .)
    GE              reduce using rule 116 (simpleExpression -> term .)
    IN              reduce using rule 116 (simpleExpression -> term .)
    PLUS            reduce using rule 116 (simpleExpression -> term .)
    MINUS           reduce using rule 116 (simpleExpression -> term .)
    OR              reduce using rule 116 (simpleExpression -> term .)
    THEN            reduce using rule 116 (simpleExpression -> term .)
    DO              reduce using rule 116 (simpleExpression -> term .)
    END             reduce using rule 116 (simpleExpression -> term .)
    SEMI            reduce using rule 116 (simpleExpression -> term .)
    UNTIL           reduce using rule 116 (simpleExpression -> term .)
    ELSE            reduce using rule 116 (simpleExpression -> term .)
    RPAREN          reduce using rule 116 (simpleExpression -> term .)
    COMMA           reduce using rule 116 (simpleExpression -> term .)
    RBRACK          reduce using rule 116 (simpleExpression -> term .)
    TO              reduce using rule 116 (simpleExpression -> term .)
    DOWNTO          reduce using rule 116 (simpleExpression -> term .)
    COLON           reduce using rule 116 (simpleExpression -> term .)
    STAR            shift and go to state 159
    SLASH           shift and go to state 160
    DIV             shift and go to state 161
    MOD             shift and go to state 162
    AND             shift and go to state 163

    multiplicativeOperator         shift and go to state 158

state 81

    (117) simpleExpression -> sign . term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    term                           shift and go to state 164
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 82

    (122) term -> factor .

    STAR            reduce using rule 122 (term -> factor .)
    SLASH           reduce using rule 122 (term -> factor .)
    DIV             reduce using rule 122 (term -> factor .)
    MOD             reduce using rule 122 (term -> factor .)
    AND             reduce using rule 122 (term -> factor .)
    EQUAL           reduce using rule 122 (term -> factor .)
    NOT_EQUAL       reduce using rule 122 (term -> factor .)
    LT              reduce using rule 122 (term -> factor .)
    LE              reduce using rule 122 (term -> factor .)
    GT              reduce using rule 122 (term -> factor .)
    GE              reduce using rule 122 (term -> factor .)
    IN              reduce using rule 122 (term -> factor .)
    PLUS            reduce using rule 122 (term -> factor .)
    MINUS           reduce using rule 122 (term -> factor .)
    OR              reduce using rule 122 (term -> factor .)
    THEN            reduce using rule 122 (term -> factor .)
    DO              reduce using rule 122 (term -> factor .)
    END             reduce using rule 122 (term -> factor .)
    SEMI            reduce using rule 122 (term -> factor .)
    UNTIL           reduce using rule 122 (term -> factor .)
    ELSE            reduce using rule 122 (term -> factor .)
    RPAREN          reduce using rule 122 (term -> factor .)
    COMMA           reduce using rule 122 (term -> factor .)
    RBRACK          reduce using rule 122 (term -> factor .)
    TO              reduce using rule 122 (term -> factor .)
    DOWNTO          reduce using rule 122 (term -> factor .)
    COLON           reduce using rule 122 (term -> factor .)


state 83

    (25) sign -> PLUS .

    LPAREN          reduce using rule 25 (sign -> PLUS .)
    NIL             reduce using rule 25 (sign -> PLUS .)
    TRUE            reduce using rule 25 (sign -> PLUS .)
    FALSE           reduce using rule 25 (sign -> PLUS .)
    IDENT           reduce using rule 25 (sign -> PLUS .)
    STRING_LITERAL  reduce using rule 25 (sign -> PLUS .)
    NUM_INT         reduce using rule 25 (sign -> PLUS .)
    NUM_REAL        reduce using rule 25 (sign -> PLUS .)


state 84

    (26) sign -> MINUS .

    LPAREN          reduce using rule 26 (sign -> MINUS .)
    NIL             reduce using rule 26 (sign -> MINUS .)
    TRUE            reduce using rule 26 (sign -> MINUS .)
    FALSE           reduce using rule 26 (sign -> MINUS .)
    IDENT           reduce using rule 26 (sign -> MINUS .)
    STRING_LITERAL  reduce using rule 26 (sign -> MINUS .)
    NUM_INT         reduce using rule 26 (sign -> MINUS .)
    NUM_REAL        reduce using rule 26 (sign -> MINUS .)


state 85

    (129) factor -> variable .

    STAR            reduce using rule 129 (factor -> variable .)
    SLASH           reduce using rule 129 (factor -> variable .)
    DIV             reduce using rule 129 (factor -> variable .)
    MOD             reduce using rule 129 (factor -> variable .)
    AND             reduce using rule 129 (factor -> variable .)
    EQUAL           reduce using rule 129 (factor -> variable .)
    NOT_EQUAL       reduce using rule 129 (factor -> variable .)
    LT              reduce using rule 129 (factor -> variable .)
    LE              reduce using rule 129 (factor -> variable .)
    GT              reduce using rule 129 (factor -> variable .)
    GE              reduce using rule 129 (factor -> variable .)
    IN              reduce using rule 129 (factor -> variable .)
    PLUS            reduce using rule 129 (factor -> variable .)
    MINUS           reduce using rule 129 (factor -> variable .)
    OR              reduce using rule 129 (factor -> variable .)
    THEN            reduce using rule 129 (factor -> variable .)
    DO              reduce using rule 129 (factor -> variable .)
    END             reduce using rule 129 (factor -> variable .)
    SEMI            reduce using rule 129 (factor -> variable .)
    UNTIL           reduce using rule 129 (factor -> variable .)
    ELSE            reduce using rule 129 (factor -> variable .)
    RBRACK          reduce using rule 129 (factor -> variable .)
    RPAREN          reduce using rule 129 (factor -> variable .)
    COMMA           reduce using rule 129 (factor -> variable .)
    TO              reduce using rule 129 (factor -> variable .)
    DOWNTO          reduce using rule 129 (factor -> variable .)
    COLON           reduce using rule 129 (factor -> variable .)


state 86

    (130) factor -> unsignedConstant .

    STAR            reduce using rule 130 (factor -> unsignedConstant .)
    SLASH           reduce using rule 130 (factor -> unsignedConstant .)
    DIV             reduce using rule 130 (factor -> unsignedConstant .)
    MOD             reduce using rule 130 (factor -> unsignedConstant .)
    AND             reduce using rule 130 (factor -> unsignedConstant .)
    EQUAL           reduce using rule 130 (factor -> unsignedConstant .)
    NOT_EQUAL       reduce using rule 130 (factor -> unsignedConstant .)
    LT              reduce using rule 130 (factor -> unsignedConstant .)
    LE              reduce using rule 130 (factor -> unsignedConstant .)
    GT              reduce using rule 130 (factor -> unsignedConstant .)
    GE              reduce using rule 130 (factor -> unsignedConstant .)
    IN              reduce using rule 130 (factor -> unsignedConstant .)
    PLUS            reduce using rule 130 (factor -> unsignedConstant .)
    MINUS           reduce using rule 130 (factor -> unsignedConstant .)
    OR              reduce using rule 130 (factor -> unsignedConstant .)
    THEN            reduce using rule 130 (factor -> unsignedConstant .)
    DO              reduce using rule 130 (factor -> unsignedConstant .)
    END             reduce using rule 130 (factor -> unsignedConstant .)
    SEMI            reduce using rule 130 (factor -> unsignedConstant .)
    UNTIL           reduce using rule 130 (factor -> unsignedConstant .)
    ELSE            reduce using rule 130 (factor -> unsignedConstant .)
    RPAREN          reduce using rule 130 (factor -> unsignedConstant .)
    COMMA           reduce using rule 130 (factor -> unsignedConstant .)
    RBRACK          reduce using rule 130 (factor -> unsignedConstant .)
    TO              reduce using rule 130 (factor -> unsignedConstant .)
    DOWNTO          reduce using rule 130 (factor -> unsignedConstant .)
    COLON           reduce using rule 130 (factor -> unsignedConstant .)


state 87

    (131) factor -> LPAREN . expression RPAREN
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    expression                     shift and go to state 165
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 88

    (104) variable -> identifier .
    (106) indexedVariable -> identifier . LBRACK expression RBRACK

    STAR            reduce using rule 104 (variable -> identifier .)
    SLASH           reduce using rule 104 (variable -> identifier .)
    DIV             reduce using rule 104 (variable -> identifier .)
    MOD             reduce using rule 104 (variable -> identifier .)
    AND             reduce using rule 104 (variable -> identifier .)
    EQUAL           reduce using rule 104 (variable -> identifier .)
    NOT_EQUAL       reduce using rule 104 (variable -> identifier .)
    LT              reduce using rule 104 (variable -> identifier .)
    LE              reduce using rule 104 (variable -> identifier .)
    GT              reduce using rule 104 (variable -> identifier .)
    GE              reduce using rule 104 (variable -> identifier .)
    IN              reduce using rule 104 (variable -> identifier .)
    PLUS            reduce using rule 104 (variable -> identifier .)
    MINUS           reduce using rule 104 (variable -> identifier .)
    OR              reduce using rule 104 (variable -> identifier .)
    THEN            reduce using rule 104 (variable -> identifier .)
    DO              reduce using rule 104 (variable -> identifier .)
    END             reduce using rule 104 (variable -> identifier .)
    SEMI            reduce using rule 104 (variable -> identifier .)
    UNTIL           reduce using rule 104 (variable -> identifier .)
    ELSE            reduce using rule 104 (variable -> identifier .)
    COLON           reduce using rule 104 (variable -> identifier .)
    RPAREN          reduce using rule 104 (variable -> identifier .)
    COMMA           reduce using rule 104 (variable -> identifier .)
    RBRACK          reduce using rule 104 (variable -> identifier .)
    TO              reduce using rule 104 (variable -> identifier .)
    DOWNTO          reduce using rule 104 (variable -> identifier .)
    LBRACK          shift and go to state 77


state 89

    (132) unsignedConstant -> unsignedNumber .

    STAR            reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    SLASH           reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    DIV             reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    MOD             reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    AND             reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    EQUAL           reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    NOT_EQUAL       reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    LT              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    LE              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    GT              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    GE              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    IN              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    PLUS            reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    MINUS           reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    OR              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    THEN            reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    DO              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    END             reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    SEMI            reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    UNTIL           reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    ELSE            reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    RPAREN          reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    COMMA           reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    RBRACK          reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    TO              reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    DOWNTO          reduce using rule 132 (unsignedConstant -> unsignedNumber .)
    COLON           reduce using rule 132 (unsignedConstant -> unsignedNumber .)


state 90

    (133) unsignedConstant -> string .

    STAR            reduce using rule 133 (unsignedConstant -> string .)
    SLASH           reduce using rule 133 (unsignedConstant -> string .)
    DIV             reduce using rule 133 (unsignedConstant -> string .)
    MOD             reduce using rule 133 (unsignedConstant -> string .)
    AND             reduce using rule 133 (unsignedConstant -> string .)
    EQUAL           reduce using rule 133 (unsignedConstant -> string .)
    NOT_EQUAL       reduce using rule 133 (unsignedConstant -> string .)
    LT              reduce using rule 133 (unsignedConstant -> string .)
    LE              reduce using rule 133 (unsignedConstant -> string .)
    GT              reduce using rule 133 (unsignedConstant -> string .)
    GE              reduce using rule 133 (unsignedConstant -> string .)
    IN              reduce using rule 133 (unsignedConstant -> string .)
    PLUS            reduce using rule 133 (unsignedConstant -> string .)
    MINUS           reduce using rule 133 (unsignedConstant -> string .)
    OR              reduce using rule 133 (unsignedConstant -> string .)
    THEN            reduce using rule 133 (unsignedConstant -> string .)
    DO              reduce using rule 133 (unsignedConstant -> string .)
    END             reduce using rule 133 (unsignedConstant -> string .)
    SEMI            reduce using rule 133 (unsignedConstant -> string .)
    UNTIL           reduce using rule 133 (unsignedConstant -> string .)
    ELSE            reduce using rule 133 (unsignedConstant -> string .)
    RPAREN          reduce using rule 133 (unsignedConstant -> string .)
    COMMA           reduce using rule 133 (unsignedConstant -> string .)
    RBRACK          reduce using rule 133 (unsignedConstant -> string .)
    TO              reduce using rule 133 (unsignedConstant -> string .)
    DOWNTO          reduce using rule 133 (unsignedConstant -> string .)
    COLON           reduce using rule 133 (unsignedConstant -> string .)


state 91

    (134) unsignedConstant -> NIL .

    STAR            reduce using rule 134 (unsignedConstant -> NIL .)
    SLASH           reduce using rule 134 (unsignedConstant -> NIL .)
    DIV             reduce using rule 134 (unsignedConstant -> NIL .)
    MOD             reduce using rule 134 (unsignedConstant -> NIL .)
    AND             reduce using rule 134 (unsignedConstant -> NIL .)
    EQUAL           reduce using rule 134 (unsignedConstant -> NIL .)
    NOT_EQUAL       reduce using rule 134 (unsignedConstant -> NIL .)
    LT              reduce using rule 134 (unsignedConstant -> NIL .)
    LE              reduce using rule 134 (unsignedConstant -> NIL .)
    GT              reduce using rule 134 (unsignedConstant -> NIL .)
    GE              reduce using rule 134 (unsignedConstant -> NIL .)
    IN              reduce using rule 134 (unsignedConstant -> NIL .)
    PLUS            reduce using rule 134 (unsignedConstant -> NIL .)
    MINUS           reduce using rule 134 (unsignedConstant -> NIL .)
    OR              reduce using rule 134 (unsignedConstant -> NIL .)
    THEN            reduce using rule 134 (unsignedConstant -> NIL .)
    DO              reduce using rule 134 (unsignedConstant -> NIL .)
    END             reduce using rule 134 (unsignedConstant -> NIL .)
    SEMI            reduce using rule 134 (unsignedConstant -> NIL .)
    UNTIL           reduce using rule 134 (unsignedConstant -> NIL .)
    ELSE            reduce using rule 134 (unsignedConstant -> NIL .)
    RPAREN          reduce using rule 134 (unsignedConstant -> NIL .)
    COMMA           reduce using rule 134 (unsignedConstant -> NIL .)
    RBRACK          reduce using rule 134 (unsignedConstant -> NIL .)
    TO              reduce using rule 134 (unsignedConstant -> NIL .)
    DOWNTO          reduce using rule 134 (unsignedConstant -> NIL .)
    COLON           reduce using rule 134 (unsignedConstant -> NIL .)


state 92

    (135) unsignedConstant -> TRUE .

    STAR            reduce using rule 135 (unsignedConstant -> TRUE .)
    SLASH           reduce using rule 135 (unsignedConstant -> TRUE .)
    DIV             reduce using rule 135 (unsignedConstant -> TRUE .)
    MOD             reduce using rule 135 (unsignedConstant -> TRUE .)
    AND             reduce using rule 135 (unsignedConstant -> TRUE .)
    EQUAL           reduce using rule 135 (unsignedConstant -> TRUE .)
    NOT_EQUAL       reduce using rule 135 (unsignedConstant -> TRUE .)
    LT              reduce using rule 135 (unsignedConstant -> TRUE .)
    LE              reduce using rule 135 (unsignedConstant -> TRUE .)
    GT              reduce using rule 135 (unsignedConstant -> TRUE .)
    GE              reduce using rule 135 (unsignedConstant -> TRUE .)
    IN              reduce using rule 135 (unsignedConstant -> TRUE .)
    PLUS            reduce using rule 135 (unsignedConstant -> TRUE .)
    MINUS           reduce using rule 135 (unsignedConstant -> TRUE .)
    OR              reduce using rule 135 (unsignedConstant -> TRUE .)
    THEN            reduce using rule 135 (unsignedConstant -> TRUE .)
    DO              reduce using rule 135 (unsignedConstant -> TRUE .)
    END             reduce using rule 135 (unsignedConstant -> TRUE .)
    SEMI            reduce using rule 135 (unsignedConstant -> TRUE .)
    UNTIL           reduce using rule 135 (unsignedConstant -> TRUE .)
    ELSE            reduce using rule 135 (unsignedConstant -> TRUE .)
    RPAREN          reduce using rule 135 (unsignedConstant -> TRUE .)
    COMMA           reduce using rule 135 (unsignedConstant -> TRUE .)
    RBRACK          reduce using rule 135 (unsignedConstant -> TRUE .)
    TO              reduce using rule 135 (unsignedConstant -> TRUE .)
    DOWNTO          reduce using rule 135 (unsignedConstant -> TRUE .)
    COLON           reduce using rule 135 (unsignedConstant -> TRUE .)


state 93

    (136) unsignedConstant -> FALSE .

    STAR            reduce using rule 136 (unsignedConstant -> FALSE .)
    SLASH           reduce using rule 136 (unsignedConstant -> FALSE .)
    DIV             reduce using rule 136 (unsignedConstant -> FALSE .)
    MOD             reduce using rule 136 (unsignedConstant -> FALSE .)
    AND             reduce using rule 136 (unsignedConstant -> FALSE .)
    EQUAL           reduce using rule 136 (unsignedConstant -> FALSE .)
    NOT_EQUAL       reduce using rule 136 (unsignedConstant -> FALSE .)
    LT              reduce using rule 136 (unsignedConstant -> FALSE .)
    LE              reduce using rule 136 (unsignedConstant -> FALSE .)
    GT              reduce using rule 136 (unsignedConstant -> FALSE .)
    GE              reduce using rule 136 (unsignedConstant -> FALSE .)
    IN              reduce using rule 136 (unsignedConstant -> FALSE .)
    PLUS            reduce using rule 136 (unsignedConstant -> FALSE .)
    MINUS           reduce using rule 136 (unsignedConstant -> FALSE .)
    OR              reduce using rule 136 (unsignedConstant -> FALSE .)
    THEN            reduce using rule 136 (unsignedConstant -> FALSE .)
    DO              reduce using rule 136 (unsignedConstant -> FALSE .)
    END             reduce using rule 136 (unsignedConstant -> FALSE .)
    SEMI            reduce using rule 136 (unsignedConstant -> FALSE .)
    UNTIL           reduce using rule 136 (unsignedConstant -> FALSE .)
    ELSE            reduce using rule 136 (unsignedConstant -> FALSE .)
    RPAREN          reduce using rule 136 (unsignedConstant -> FALSE .)
    COMMA           reduce using rule 136 (unsignedConstant -> FALSE .)
    RBRACK          reduce using rule 136 (unsignedConstant -> FALSE .)
    TO              reduce using rule 136 (unsignedConstant -> FALSE .)
    DOWNTO          reduce using rule 136 (unsignedConstant -> FALSE .)
    COLON           reduce using rule 136 (unsignedConstant -> FALSE .)


state 94

    (21) unsignedNumber -> unsignedInteger .

    STAR            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    SLASH           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    DIV             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    MOD             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    AND             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    EQUAL           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    NOT_EQUAL       reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    LT              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    LE              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    GT              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    GE              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    IN              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    PLUS            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    MINUS           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    OR              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    THEN            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    DO              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    SEMI            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    END             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    UNTIL           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    ELSE            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    RPAREN          reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    COMMA           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    RBRACK          reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    TO              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    DOWNTO          reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    COLON           reduce using rule 21 (unsignedNumber -> unsignedInteger .)


state 95

    (22) unsignedNumber -> unsignedReal .

    STAR            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    SLASH           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    DIV             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    MOD             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    AND             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    EQUAL           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    NOT_EQUAL       reduce using rule 22 (unsignedNumber -> unsignedReal .)
    LT              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    LE              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    GT              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    GE              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    IN              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    PLUS            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    MINUS           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    OR              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    THEN            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    DO              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    SEMI            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    END             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    UNTIL           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    ELSE            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    RPAREN          reduce using rule 22 (unsignedNumber -> unsignedReal .)
    COMMA           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    RBRACK          reduce using rule 22 (unsignedNumber -> unsignedReal .)
    TO              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    DOWNTO          reduce using rule 22 (unsignedNumber -> unsignedReal .)
    COLON           reduce using rule 22 (unsignedNumber -> unsignedReal .)


state 96

    (27) string -> STRING_LITERAL .

    STAR            reduce using rule 27 (string -> STRING_LITERAL .)
    SLASH           reduce using rule 27 (string -> STRING_LITERAL .)
    DIV             reduce using rule 27 (string -> STRING_LITERAL .)
    MOD             reduce using rule 27 (string -> STRING_LITERAL .)
    AND             reduce using rule 27 (string -> STRING_LITERAL .)
    EQUAL           reduce using rule 27 (string -> STRING_LITERAL .)
    NOT_EQUAL       reduce using rule 27 (string -> STRING_LITERAL .)
    LT              reduce using rule 27 (string -> STRING_LITERAL .)
    LE              reduce using rule 27 (string -> STRING_LITERAL .)
    GT              reduce using rule 27 (string -> STRING_LITERAL .)
    GE              reduce using rule 27 (string -> STRING_LITERAL .)
    IN              reduce using rule 27 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 27 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 27 (string -> STRING_LITERAL .)
    OR              reduce using rule 27 (string -> STRING_LITERAL .)
    THEN            reduce using rule 27 (string -> STRING_LITERAL .)
    DO              reduce using rule 27 (string -> STRING_LITERAL .)
    SEMI            reduce using rule 27 (string -> STRING_LITERAL .)
    END             reduce using rule 27 (string -> STRING_LITERAL .)
    UNTIL           reduce using rule 27 (string -> STRING_LITERAL .)
    ELSE            reduce using rule 27 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 27 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 27 (string -> STRING_LITERAL .)
    RBRACK          reduce using rule 27 (string -> STRING_LITERAL .)
    TO              reduce using rule 27 (string -> STRING_LITERAL .)
    DOWNTO          reduce using rule 27 (string -> STRING_LITERAL .)
    COLON           reduce using rule 27 (string -> STRING_LITERAL .)


state 97

    (23) unsignedInteger -> NUM_INT .

    STAR            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    SLASH           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DIV             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    MOD             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    AND             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    EQUAL           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    NOT_EQUAL       reduce using rule 23 (unsignedInteger -> NUM_INT .)
    LT              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    LE              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    GT              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    GE              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    IN              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    PLUS            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    MINUS           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    OR              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    THEN            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DO              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    SEMI            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DOTDOT          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    END             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    UNTIL           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    ELSE            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    RPAREN          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    COMMA           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    RBRACK          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    TO              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DOWNTO          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    COLON           reduce using rule 23 (unsignedInteger -> NUM_INT .)


state 98

    (24) unsignedReal -> NUM_REAL .

    STAR            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    SLASH           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    DIV             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    MOD             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    AND             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    EQUAL           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    NOT_EQUAL       reduce using rule 24 (unsignedReal -> NUM_REAL .)
    LT              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    LE              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    GT              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    GE              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    IN              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    PLUS            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    MINUS           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    OR              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    THEN            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    DO              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    SEMI            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    END             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    UNTIL           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    ELSE            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    RPAREN          reduce using rule 24 (unsignedReal -> NUM_REAL .)
    COMMA           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    RBRACK          reduce using rule 24 (unsignedReal -> NUM_REAL .)
    TO              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    DOWNTO          reduce using rule 24 (unsignedReal -> NUM_REAL .)
    COLON           reduce using rule 24 (unsignedReal -> NUM_REAL .)


state 99

    (152) forStatement -> FOR identifier . ASSIGN expression TO expression DO statement
    (153) forStatement -> FOR identifier . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 166


state 100

    (154) whileStatement -> WHILE expression . DO statement

    DO              shift and go to state 167


state 101

    (155) repeatStatement -> REPEAT statements . UNTIL expression
    (96) statements -> statements . SEMI statement

    UNTIL           shift and go to state 168
    SEMI            shift and go to state 74


state 102

    (12) constantDefinitionList -> constantDefinitionList constantDefinition SEMI .

    IDENT           reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    CONST           reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    TYPE            reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    VAR             reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    PROCEDURE       reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    FUNCTION        reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    BEGIN           reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)


state 103

    (17) constant -> identifier .

    SEMI            reduce using rule 17 (constant -> identifier .)


state 104

    (14) constantDefinition -> identifier EQUAL constant .

    SEMI            reduce using rule 14 (constantDefinition -> identifier EQUAL constant .)


state 105

    (15) constant -> unsignedNumber .

    SEMI            reduce using rule 15 (constant -> unsignedNumber .)


state 106

    (16) constant -> sign . unsignedNumber
    (18) constant -> sign . identifier
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (3) identifier -> . IDENT
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    IDENT           shift and go to state 20
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    unsignedNumber                 shift and go to state 169
    identifier                     shift and go to state 170
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 107

    (19) constant -> string .

    SEMI            reduce using rule 19 (constant -> string .)


state 108

    (20) constant -> constantChr .

    SEMI            reduce using rule 20 (constant -> constantChr .)


state 109

    (28) constantChr -> CHR . LPAREN unsignedInteger RPAREN

    LPAREN          shift and go to state 171


state 110

    (30) typeDefinitionList -> typeDefinitionList typeDefinition SEMI .

    IDENT           reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    CONST           reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    TYPE            reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    VAR             reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    PROCEDURE       reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    FUNCTION        reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    BEGIN           reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)


state 111

    (63) typeIdentifier -> identifier .

    SEMI            reduce using rule 63 (typeIdentifier -> identifier .)
    RPAREN          reduce using rule 63 (typeIdentifier -> identifier .)


state 112

    (32) typeDefinition -> identifier EQUAL type_ .

    SEMI            reduce using rule 32 (typeDefinition -> identifier EQUAL type_ .)


state 113

    (33) type_ -> scalarType .

    SEMI            reduce using rule 33 (type_ -> scalarType .)


state 114

    (34) type_ -> subrangeType .

    SEMI            reduce using rule 34 (type_ -> subrangeType .)


state 115

    (35) type_ -> typeIdentifier .

    SEMI            reduce using rule 35 (type_ -> typeIdentifier .)


state 116

    (36) type_ -> stringType .

    SEMI            reduce using rule 36 (type_ -> stringType .)


state 117

    (37) type_ -> arrayType .

    SEMI            reduce using rule 37 (type_ -> arrayType .)


state 118

    (38) scalarType -> LPAREN . identifierList RPAREN
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifierList                 shift and go to state 172
    identifier                     shift and go to state 34

state 119

    (41) subrangeType -> unsignedInteger . DOTDOT unsignedInteger

    DOTDOT          shift and go to state 173


state 120

    (64) typeIdentifier -> INTEGER .

    SEMI            reduce using rule 64 (typeIdentifier -> INTEGER .)
    RPAREN          reduce using rule 64 (typeIdentifier -> INTEGER .)


state 121

    (65) typeIdentifier -> REAL .

    SEMI            reduce using rule 65 (typeIdentifier -> REAL .)
    RPAREN          reduce using rule 65 (typeIdentifier -> REAL .)


state 122

    (66) typeIdentifier -> BOOLEAN .

    SEMI            reduce using rule 66 (typeIdentifier -> BOOLEAN .)
    RPAREN          reduce using rule 66 (typeIdentifier -> BOOLEAN .)


state 123

    (67) typeIdentifier -> CHAR .

    SEMI            reduce using rule 67 (typeIdentifier -> CHAR .)
    RPAREN          reduce using rule 67 (typeIdentifier -> CHAR .)


state 124

    (68) typeIdentifier -> STRING .
    (43) stringType -> STRING . LBRACK unsignedInteger RBRACK

    SEMI            reduce using rule 68 (typeIdentifier -> STRING .)
    LBRACK          shift and go to state 174


state 125

    (47) arrayType -> ARRAY . LBRACK subrangeType RBRACK OF typeIdentifier

    LBRACK          shift and go to state 175


state 126

    (77) variableDeclarationList -> variableDeclarationList SEMI variableDeclaration .

    SEMI            reduce using rule 77 (variableDeclarationList -> variableDeclarationList SEMI variableDeclaration .)


state 127

    (79) variableDeclaration -> identifierList COLON type_ .

    SEMI            reduce using rule 79 (variableDeclaration -> identifierList COLON type_ .)


state 128

    (39) identifierList -> identifierList COMMA identifier .

    COLON           reduce using rule 39 (identifierList -> identifierList COMMA identifier .)
    COMMA           reduce using rule 39 (identifierList -> identifierList COMMA identifier .)
    RPAREN          reduce using rule 39 (identifierList -> identifierList COMMA identifier .)


state 129

    (82) procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI . block
    (4) block -> . declarations compoundStatement
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (159) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration
    (82) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (93) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 159 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    block                          shift and go to state 176
    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 130

    (85) formalParameterList -> LPAREN formalParameterSectionList . RPAREN
    (86) formalParameterSectionList -> formalParameterSectionList . SEMI formalParameterSection

    RPAREN          shift and go to state 177
    SEMI            shift and go to state 178


state 131

    (87) formalParameterSectionList -> formalParameterSection .

    RPAREN          reduce using rule 87 (formalParameterSectionList -> formalParameterSection .)
    SEMI            reduce using rule 87 (formalParameterSectionList -> formalParameterSection .)


state 132

    (88) formalParameterSection -> parameterGroup .

    RPAREN          reduce using rule 88 (formalParameterSection -> parameterGroup .)
    SEMI            reduce using rule 88 (formalParameterSection -> parameterGroup .)


state 133

    (89) formalParameterSection -> VAR . parameterGroup
    (92) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    parameterGroup                 shift and go to state 179
    identifierList                 shift and go to state 136
    identifier                     shift and go to state 34

state 134

    (90) formalParameterSection -> FUNCTION . parameterGroup
    (92) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    parameterGroup                 shift and go to state 180
    identifierList                 shift and go to state 136
    identifier                     shift and go to state 34

state 135

    (91) formalParameterSection -> PROCEDURE . parameterGroup
    (92) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    parameterGroup                 shift and go to state 181
    identifierList                 shift and go to state 136
    identifier                     shift and go to state 34

state 136

    (92) parameterGroup -> identifierList . COLON typeIdentifier
    (39) identifierList -> identifierList . COMMA identifier

    COLON           shift and go to state 182
    COMMA           shift and go to state 67


state 137

    (93) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON . resultType SEMI block
    (94) resultType -> . typeIdentifier
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (3) identifier -> . IDENT

    INTEGER         shift and go to state 120
    REAL            shift and go to state 121
    BOOLEAN         shift and go to state 122
    CHAR            shift and go to state 123
    STRING          shift and go to state 185
    IDENT           shift and go to state 20

    identifier                     shift and go to state 111
    resultType                     shift and go to state 183
    typeIdentifier                 shift and go to state 184

state 138

    (96) statements -> statements SEMI statement .

    END             reduce using rule 96 (statements -> statements SEMI statement .)
    SEMI            reduce using rule 96 (statements -> statements SEMI statement .)
    UNTIL           reduce using rule 96 (statements -> statements SEMI statement .)


state 139

    (103) assignmentStatement -> variable ASSIGN expression .

    END             reduce using rule 103 (assignmentStatement -> variable ASSIGN expression .)
    SEMI            reduce using rule 103 (assignmentStatement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 103 (assignmentStatement -> variable ASSIGN expression .)
    ELSE            reduce using rule 103 (assignmentStatement -> variable ASSIGN expression .)


state 140

    (138) procedureStatement -> identifier LPAREN expressionList . RPAREN
    (139) expressionList -> expressionList . COMMA expression
    (140) expressionList -> expressionList . COMMA formattedExpression

    RPAREN          shift and go to state 186
    COMMA           shift and go to state 187


state 141

    (141) expressionList -> expression .

    RPAREN          reduce using rule 141 (expressionList -> expression .)
    COMMA           reduce using rule 141 (expressionList -> expression .)


state 142

    (142) expressionList -> formattedExpression .

    RPAREN          reduce using rule 142 (expressionList -> formattedExpression .)
    COMMA           reduce using rule 142 (expressionList -> formattedExpression .)


state 143

    (143) formattedExpression -> variable . COLON expression COLON expression
    (144) formattedExpression -> variable . COLON expression
    (129) factor -> variable .

    COLON           shift and go to state 188
    STAR            reduce using rule 129 (factor -> variable .)
    SLASH           reduce using rule 129 (factor -> variable .)
    DIV             reduce using rule 129 (factor -> variable .)
    MOD             reduce using rule 129 (factor -> variable .)
    AND             reduce using rule 129 (factor -> variable .)
    EQUAL           reduce using rule 129 (factor -> variable .)
    NOT_EQUAL       reduce using rule 129 (factor -> variable .)
    LT              reduce using rule 129 (factor -> variable .)
    LE              reduce using rule 129 (factor -> variable .)
    GT              reduce using rule 129 (factor -> variable .)
    GE              reduce using rule 129 (factor -> variable .)
    IN              reduce using rule 129 (factor -> variable .)
    PLUS            reduce using rule 129 (factor -> variable .)
    MINUS           reduce using rule 129 (factor -> variable .)
    OR              reduce using rule 129 (factor -> variable .)
    RPAREN          reduce using rule 129 (factor -> variable .)
    COMMA           reduce using rule 129 (factor -> variable .)


state 144

    (106) indexedVariable -> identifier LBRACK expression . RBRACK

    RBRACK          shift and go to state 189


state 145

    (157) ifStatement -> IF expression THEN . statement
    (158) ifStatement -> IF expression THEN . statement ELSE statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 145 (emptyStatement_ -> .)
    END             reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    UNTIL           reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    statement                      shift and go to state 190
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    identifier                     shift and go to state 49
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 146

    (108) expression -> simpleExpression relationalOperator . simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    simpleExpression               shift and go to state 191
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 147

    (118) simpleExpression -> simpleExpression additiveOperator . term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    term                           shift and go to state 192
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 148

    (109) relationalOperator -> EQUAL .

    PLUS            reduce using rule 109 (relationalOperator -> EQUAL .)
    MINUS           reduce using rule 109 (relationalOperator -> EQUAL .)
    LPAREN          reduce using rule 109 (relationalOperator -> EQUAL .)
    NIL             reduce using rule 109 (relationalOperator -> EQUAL .)
    TRUE            reduce using rule 109 (relationalOperator -> EQUAL .)
    FALSE           reduce using rule 109 (relationalOperator -> EQUAL .)
    IDENT           reduce using rule 109 (relationalOperator -> EQUAL .)
    STRING_LITERAL  reduce using rule 109 (relationalOperator -> EQUAL .)
    NUM_INT         reduce using rule 109 (relationalOperator -> EQUAL .)
    NUM_REAL        reduce using rule 109 (relationalOperator -> EQUAL .)


state 149

    (110) relationalOperator -> NOT_EQUAL .

    PLUS            reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    MINUS           reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    LPAREN          reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    NIL             reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    TRUE            reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    FALSE           reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    IDENT           reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    STRING_LITERAL  reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    NUM_INT         reduce using rule 110 (relationalOperator -> NOT_EQUAL .)
    NUM_REAL        reduce using rule 110 (relationalOperator -> NOT_EQUAL .)


state 150

    (111) relationalOperator -> LT .

    PLUS            reduce using rule 111 (relationalOperator -> LT .)
    MINUS           reduce using rule 111 (relationalOperator -> LT .)
    LPAREN          reduce using rule 111 (relationalOperator -> LT .)
    NIL             reduce using rule 111 (relationalOperator -> LT .)
    TRUE            reduce using rule 111 (relationalOperator -> LT .)
    FALSE           reduce using rule 111 (relationalOperator -> LT .)
    IDENT           reduce using rule 111 (relationalOperator -> LT .)
    STRING_LITERAL  reduce using rule 111 (relationalOperator -> LT .)
    NUM_INT         reduce using rule 111 (relationalOperator -> LT .)
    NUM_REAL        reduce using rule 111 (relationalOperator -> LT .)


state 151

    (112) relationalOperator -> LE .

    PLUS            reduce using rule 112 (relationalOperator -> LE .)
    MINUS           reduce using rule 112 (relationalOperator -> LE .)
    LPAREN          reduce using rule 112 (relationalOperator -> LE .)
    NIL             reduce using rule 112 (relationalOperator -> LE .)
    TRUE            reduce using rule 112 (relationalOperator -> LE .)
    FALSE           reduce using rule 112 (relationalOperator -> LE .)
    IDENT           reduce using rule 112 (relationalOperator -> LE .)
    STRING_LITERAL  reduce using rule 112 (relationalOperator -> LE .)
    NUM_INT         reduce using rule 112 (relationalOperator -> LE .)
    NUM_REAL        reduce using rule 112 (relationalOperator -> LE .)


state 152

    (113) relationalOperator -> GT .

    PLUS            reduce using rule 113 (relationalOperator -> GT .)
    MINUS           reduce using rule 113 (relationalOperator -> GT .)
    LPAREN          reduce using rule 113 (relationalOperator -> GT .)
    NIL             reduce using rule 113 (relationalOperator -> GT .)
    TRUE            reduce using rule 113 (relationalOperator -> GT .)
    FALSE           reduce using rule 113 (relationalOperator -> GT .)
    IDENT           reduce using rule 113 (relationalOperator -> GT .)
    STRING_LITERAL  reduce using rule 113 (relationalOperator -> GT .)
    NUM_INT         reduce using rule 113 (relationalOperator -> GT .)
    NUM_REAL        reduce using rule 113 (relationalOperator -> GT .)


state 153

    (114) relationalOperator -> GE .

    PLUS            reduce using rule 114 (relationalOperator -> GE .)
    MINUS           reduce using rule 114 (relationalOperator -> GE .)
    LPAREN          reduce using rule 114 (relationalOperator -> GE .)
    NIL             reduce using rule 114 (relationalOperator -> GE .)
    TRUE            reduce using rule 114 (relationalOperator -> GE .)
    FALSE           reduce using rule 114 (relationalOperator -> GE .)
    IDENT           reduce using rule 114 (relationalOperator -> GE .)
    STRING_LITERAL  reduce using rule 114 (relationalOperator -> GE .)
    NUM_INT         reduce using rule 114 (relationalOperator -> GE .)
    NUM_REAL        reduce using rule 114 (relationalOperator -> GE .)


state 154

    (115) relationalOperator -> IN .

    PLUS            reduce using rule 115 (relationalOperator -> IN .)
    MINUS           reduce using rule 115 (relationalOperator -> IN .)
    LPAREN          reduce using rule 115 (relationalOperator -> IN .)
    NIL             reduce using rule 115 (relationalOperator -> IN .)
    TRUE            reduce using rule 115 (relationalOperator -> IN .)
    FALSE           reduce using rule 115 (relationalOperator -> IN .)
    IDENT           reduce using rule 115 (relationalOperator -> IN .)
    STRING_LITERAL  reduce using rule 115 (relationalOperator -> IN .)
    NUM_INT         reduce using rule 115 (relationalOperator -> IN .)
    NUM_REAL        reduce using rule 115 (relationalOperator -> IN .)


state 155

    (119) additiveOperator -> PLUS .

    LPAREN          reduce using rule 119 (additiveOperator -> PLUS .)
    NIL             reduce using rule 119 (additiveOperator -> PLUS .)
    TRUE            reduce using rule 119 (additiveOperator -> PLUS .)
    FALSE           reduce using rule 119 (additiveOperator -> PLUS .)
    IDENT           reduce using rule 119 (additiveOperator -> PLUS .)
    STRING_LITERAL  reduce using rule 119 (additiveOperator -> PLUS .)
    NUM_INT         reduce using rule 119 (additiveOperator -> PLUS .)
    NUM_REAL        reduce using rule 119 (additiveOperator -> PLUS .)


state 156

    (120) additiveOperator -> MINUS .

    LPAREN          reduce using rule 120 (additiveOperator -> MINUS .)
    NIL             reduce using rule 120 (additiveOperator -> MINUS .)
    TRUE            reduce using rule 120 (additiveOperator -> MINUS .)
    FALSE           reduce using rule 120 (additiveOperator -> MINUS .)
    IDENT           reduce using rule 120 (additiveOperator -> MINUS .)
    STRING_LITERAL  reduce using rule 120 (additiveOperator -> MINUS .)
    NUM_INT         reduce using rule 120 (additiveOperator -> MINUS .)
    NUM_REAL        reduce using rule 120 (additiveOperator -> MINUS .)


state 157

    (121) additiveOperator -> OR .

    LPAREN          reduce using rule 121 (additiveOperator -> OR .)
    NIL             reduce using rule 121 (additiveOperator -> OR .)
    TRUE            reduce using rule 121 (additiveOperator -> OR .)
    FALSE           reduce using rule 121 (additiveOperator -> OR .)
    IDENT           reduce using rule 121 (additiveOperator -> OR .)
    STRING_LITERAL  reduce using rule 121 (additiveOperator -> OR .)
    NUM_INT         reduce using rule 121 (additiveOperator -> OR .)
    NUM_REAL        reduce using rule 121 (additiveOperator -> OR .)


state 158

    (123) term -> term multiplicativeOperator . factor
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    factor                         shift and go to state 193
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 159

    (124) multiplicativeOperator -> STAR .

    LPAREN          reduce using rule 124 (multiplicativeOperator -> STAR .)
    NIL             reduce using rule 124 (multiplicativeOperator -> STAR .)
    TRUE            reduce using rule 124 (multiplicativeOperator -> STAR .)
    FALSE           reduce using rule 124 (multiplicativeOperator -> STAR .)
    IDENT           reduce using rule 124 (multiplicativeOperator -> STAR .)
    STRING_LITERAL  reduce using rule 124 (multiplicativeOperator -> STAR .)
    NUM_INT         reduce using rule 124 (multiplicativeOperator -> STAR .)
    NUM_REAL        reduce using rule 124 (multiplicativeOperator -> STAR .)


state 160

    (125) multiplicativeOperator -> SLASH .

    LPAREN          reduce using rule 125 (multiplicativeOperator -> SLASH .)
    NIL             reduce using rule 125 (multiplicativeOperator -> SLASH .)
    TRUE            reduce using rule 125 (multiplicativeOperator -> SLASH .)
    FALSE           reduce using rule 125 (multiplicativeOperator -> SLASH .)
    IDENT           reduce using rule 125 (multiplicativeOperator -> SLASH .)
    STRING_LITERAL  reduce using rule 125 (multiplicativeOperator -> SLASH .)
    NUM_INT         reduce using rule 125 (multiplicativeOperator -> SLASH .)
    NUM_REAL        reduce using rule 125 (multiplicativeOperator -> SLASH .)


state 161

    (126) multiplicativeOperator -> DIV .

    LPAREN          reduce using rule 126 (multiplicativeOperator -> DIV .)
    NIL             reduce using rule 126 (multiplicativeOperator -> DIV .)
    TRUE            reduce using rule 126 (multiplicativeOperator -> DIV .)
    FALSE           reduce using rule 126 (multiplicativeOperator -> DIV .)
    IDENT           reduce using rule 126 (multiplicativeOperator -> DIV .)
    STRING_LITERAL  reduce using rule 126 (multiplicativeOperator -> DIV .)
    NUM_INT         reduce using rule 126 (multiplicativeOperator -> DIV .)
    NUM_REAL        reduce using rule 126 (multiplicativeOperator -> DIV .)


state 162

    (127) multiplicativeOperator -> MOD .

    LPAREN          reduce using rule 127 (multiplicativeOperator -> MOD .)
    NIL             reduce using rule 127 (multiplicativeOperator -> MOD .)
    TRUE            reduce using rule 127 (multiplicativeOperator -> MOD .)
    FALSE           reduce using rule 127 (multiplicativeOperator -> MOD .)
    IDENT           reduce using rule 127 (multiplicativeOperator -> MOD .)
    STRING_LITERAL  reduce using rule 127 (multiplicativeOperator -> MOD .)
    NUM_INT         reduce using rule 127 (multiplicativeOperator -> MOD .)
    NUM_REAL        reduce using rule 127 (multiplicativeOperator -> MOD .)


state 163

    (128) multiplicativeOperator -> AND .

    LPAREN          reduce using rule 128 (multiplicativeOperator -> AND .)
    NIL             reduce using rule 128 (multiplicativeOperator -> AND .)
    TRUE            reduce using rule 128 (multiplicativeOperator -> AND .)
    FALSE           reduce using rule 128 (multiplicativeOperator -> AND .)
    IDENT           reduce using rule 128 (multiplicativeOperator -> AND .)
    STRING_LITERAL  reduce using rule 128 (multiplicativeOperator -> AND .)
    NUM_INT         reduce using rule 128 (multiplicativeOperator -> AND .)
    NUM_REAL        reduce using rule 128 (multiplicativeOperator -> AND .)


state 164

    (117) simpleExpression -> sign term .
    (123) term -> term . multiplicativeOperator factor
    (124) multiplicativeOperator -> . STAR
    (125) multiplicativeOperator -> . SLASH
    (126) multiplicativeOperator -> . DIV
    (127) multiplicativeOperator -> . MOD
    (128) multiplicativeOperator -> . AND

    EQUAL           reduce using rule 117 (simpleExpression -> sign term .)
    NOT_EQUAL       reduce using rule 117 (simpleExpression -> sign term .)
    LT              reduce using rule 117 (simpleExpression -> sign term .)
    LE              reduce using rule 117 (simpleExpression -> sign term .)
    GT              reduce using rule 117 (simpleExpression -> sign term .)
    GE              reduce using rule 117 (simpleExpression -> sign term .)
    IN              reduce using rule 117 (simpleExpression -> sign term .)
    PLUS            reduce using rule 117 (simpleExpression -> sign term .)
    MINUS           reduce using rule 117 (simpleExpression -> sign term .)
    OR              reduce using rule 117 (simpleExpression -> sign term .)
    THEN            reduce using rule 117 (simpleExpression -> sign term .)
    DO              reduce using rule 117 (simpleExpression -> sign term .)
    END             reduce using rule 117 (simpleExpression -> sign term .)
    SEMI            reduce using rule 117 (simpleExpression -> sign term .)
    UNTIL           reduce using rule 117 (simpleExpression -> sign term .)
    ELSE            reduce using rule 117 (simpleExpression -> sign term .)
    RPAREN          reduce using rule 117 (simpleExpression -> sign term .)
    COMMA           reduce using rule 117 (simpleExpression -> sign term .)
    RBRACK          reduce using rule 117 (simpleExpression -> sign term .)
    TO              reduce using rule 117 (simpleExpression -> sign term .)
    DOWNTO          reduce using rule 117 (simpleExpression -> sign term .)
    COLON           reduce using rule 117 (simpleExpression -> sign term .)
    STAR            shift and go to state 159
    SLASH           shift and go to state 160
    DIV             shift and go to state 161
    MOD             shift and go to state 162
    AND             shift and go to state 163

    multiplicativeOperator         shift and go to state 158

state 165

    (131) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 194


state 166

    (152) forStatement -> FOR identifier ASSIGN . expression TO expression DO statement
    (153) forStatement -> FOR identifier ASSIGN . expression DOWNTO expression DO statement
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    identifier                     shift and go to state 88
    expression                     shift and go to state 195
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 167

    (154) whileStatement -> WHILE expression DO . statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 145 (emptyStatement_ -> .)
    END             reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    UNTIL           reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    statement                      shift and go to state 196
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    identifier                     shift and go to state 49
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 168

    (155) repeatStatement -> REPEAT statements UNTIL . expression
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    expression                     shift and go to state 197
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 169

    (16) constant -> sign unsignedNumber .

    SEMI            reduce using rule 16 (constant -> sign unsignedNumber .)


state 170

    (18) constant -> sign identifier .

    SEMI            reduce using rule 18 (constant -> sign identifier .)


state 171

    (28) constantChr -> CHR LPAREN . unsignedInteger RPAREN
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 97

    unsignedInteger                shift and go to state 198

state 172

    (38) scalarType -> LPAREN identifierList . RPAREN
    (39) identifierList -> identifierList . COMMA identifier

    RPAREN          shift and go to state 199
    COMMA           shift and go to state 67


state 173

    (41) subrangeType -> unsignedInteger DOTDOT . unsignedInteger
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 97

    unsignedInteger                shift and go to state 200

state 174

    (43) stringType -> STRING LBRACK . unsignedInteger RBRACK
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 97

    unsignedInteger                shift and go to state 201

state 175

    (47) arrayType -> ARRAY LBRACK . subrangeType RBRACK OF typeIdentifier
    (41) subrangeType -> . unsignedInteger DOTDOT unsignedInteger
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 97

    subrangeType                   shift and go to state 202
    unsignedInteger                shift and go to state 119

state 176

    (82) procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .

    CONST           reduce using rule 82 (procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .)
    TYPE            reduce using rule 82 (procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .)
    VAR             reduce using rule 82 (procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .)
    PROCEDURE       reduce using rule 82 (procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .)
    FUNCTION        reduce using rule 82 (procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .)
    BEGIN           reduce using rule 82 (procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .)


state 177

    (85) formalParameterList -> LPAREN formalParameterSectionList RPAREN .

    SEMI            reduce using rule 85 (formalParameterList -> LPAREN formalParameterSectionList RPAREN .)
    COLON           reduce using rule 85 (formalParameterList -> LPAREN formalParameterSectionList RPAREN .)


state 178

    (86) formalParameterSectionList -> formalParameterSectionList SEMI . formalParameterSection
    (88) formalParameterSection -> . parameterGroup
    (89) formalParameterSection -> . VAR parameterGroup
    (90) formalParameterSection -> . FUNCTION parameterGroup
    (91) formalParameterSection -> . PROCEDURE parameterGroup
    (92) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    VAR             shift and go to state 133
    FUNCTION        shift and go to state 134
    PROCEDURE       shift and go to state 135
    IDENT           shift and go to state 20

    formalParameterSection         shift and go to state 203
    parameterGroup                 shift and go to state 132
    identifierList                 shift and go to state 136
    identifier                     shift and go to state 34

state 179

    (89) formalParameterSection -> VAR parameterGroup .

    RPAREN          reduce using rule 89 (formalParameterSection -> VAR parameterGroup .)
    SEMI            reduce using rule 89 (formalParameterSection -> VAR parameterGroup .)


state 180

    (90) formalParameterSection -> FUNCTION parameterGroup .

    RPAREN          reduce using rule 90 (formalParameterSection -> FUNCTION parameterGroup .)
    SEMI            reduce using rule 90 (formalParameterSection -> FUNCTION parameterGroup .)


state 181

    (91) formalParameterSection -> PROCEDURE parameterGroup .

    RPAREN          reduce using rule 91 (formalParameterSection -> PROCEDURE parameterGroup .)
    SEMI            reduce using rule 91 (formalParameterSection -> PROCEDURE parameterGroup .)


state 182

    (92) parameterGroup -> identifierList COLON . typeIdentifier
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (3) identifier -> . IDENT

    INTEGER         shift and go to state 120
    REAL            shift and go to state 121
    BOOLEAN         shift and go to state 122
    CHAR            shift and go to state 123
    STRING          shift and go to state 185
    IDENT           shift and go to state 20

    typeIdentifier                 shift and go to state 204
    identifier                     shift and go to state 111

state 183

    (93) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType . SEMI block

    SEMI            shift and go to state 205


state 184

    (94) resultType -> typeIdentifier .

    SEMI            reduce using rule 94 (resultType -> typeIdentifier .)


state 185

    (68) typeIdentifier -> STRING .

    SEMI            reduce using rule 68 (typeIdentifier -> STRING .)
    RPAREN          reduce using rule 68 (typeIdentifier -> STRING .)


state 186

    (138) procedureStatement -> identifier LPAREN expressionList RPAREN .

    END             reduce using rule 138 (procedureStatement -> identifier LPAREN expressionList RPAREN .)
    SEMI            reduce using rule 138 (procedureStatement -> identifier LPAREN expressionList RPAREN .)
    UNTIL           reduce using rule 138 (procedureStatement -> identifier LPAREN expressionList RPAREN .)
    ELSE            reduce using rule 138 (procedureStatement -> identifier LPAREN expressionList RPAREN .)


state 187

    (139) expressionList -> expressionList COMMA . expression
    (140) expressionList -> expressionList COMMA . formattedExpression
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (143) formattedExpression -> . variable COLON expression COLON expression
    (144) formattedExpression -> . variable COLON expression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    IDENT           shift and go to state 20
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    expression                     shift and go to state 206
    formattedExpression            shift and go to state 207
    simpleExpression               shift and go to state 79
    variable                       shift and go to state 143
    term                           shift and go to state 80
    sign                           shift and go to state 81
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    factor                         shift and go to state 82
    unsignedConstant               shift and go to state 86
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 188

    (143) formattedExpression -> variable COLON . expression COLON expression
    (144) formattedExpression -> variable COLON . expression
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    variable                       shift and go to state 85
    expression                     shift and go to state 208
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 189

    (106) indexedVariable -> identifier LBRACK expression RBRACK .

    ASSIGN          reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    STAR            reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    SLASH           reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    DIV             reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    MOD             reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    AND             reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    EQUAL           reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    NOT_EQUAL       reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    LT              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    LE              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    GT              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    GE              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    IN              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    PLUS            reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    MINUS           reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    OR              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    THEN            reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    DO              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    END             reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    SEMI            reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    UNTIL           reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    ELSE            reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    COLON           reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    RPAREN          reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    COMMA           reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    RBRACK          reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    TO              reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)
    DOWNTO          reduce using rule 106 (indexedVariable -> identifier LBRACK expression RBRACK .)


state 190

    (157) ifStatement -> IF expression THEN statement .
    (158) ifStatement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 157 (ifStatement -> IF expression THEN statement .)
    SEMI            reduce using rule 157 (ifStatement -> IF expression THEN statement .)
    UNTIL           reduce using rule 157 (ifStatement -> IF expression THEN statement .)
    ELSE            shift and go to state 209

  ! ELSE            [ reduce using rule 157 (ifStatement -> IF expression THEN statement .) ]


state 191

    (108) expression -> simpleExpression relationalOperator simpleExpression .
    (118) simpleExpression -> simpleExpression . additiveOperator term
    (119) additiveOperator -> . PLUS
    (120) additiveOperator -> . MINUS
    (121) additiveOperator -> . OR

    THEN            reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    DO              reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    END             reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    SEMI            reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    UNTIL           reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    ELSE            reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    RPAREN          reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    COMMA           reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    RBRACK          reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    TO              reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    DOWNTO          reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    COLON           reduce using rule 108 (expression -> simpleExpression relationalOperator simpleExpression .)
    PLUS            shift and go to state 155
    MINUS           shift and go to state 156
    OR              shift and go to state 157

    additiveOperator               shift and go to state 147

state 192

    (118) simpleExpression -> simpleExpression additiveOperator term .
    (123) term -> term . multiplicativeOperator factor
    (124) multiplicativeOperator -> . STAR
    (125) multiplicativeOperator -> . SLASH
    (126) multiplicativeOperator -> . DIV
    (127) multiplicativeOperator -> . MOD
    (128) multiplicativeOperator -> . AND

    EQUAL           reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    NOT_EQUAL       reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    LT              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    LE              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    GT              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    GE              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    IN              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    PLUS            reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    MINUS           reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    OR              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    THEN            reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    DO              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    END             reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    SEMI            reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    UNTIL           reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    ELSE            reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    RPAREN          reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    COMMA           reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    RBRACK          reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    TO              reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    DOWNTO          reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    COLON           reduce using rule 118 (simpleExpression -> simpleExpression additiveOperator term .)
    STAR            shift and go to state 159
    SLASH           shift and go to state 160
    DIV             shift and go to state 161
    MOD             shift and go to state 162
    AND             shift and go to state 163

    multiplicativeOperator         shift and go to state 158

state 193

    (123) term -> term multiplicativeOperator factor .

    STAR            reduce using rule 123 (term -> term multiplicativeOperator factor .)
    SLASH           reduce using rule 123 (term -> term multiplicativeOperator factor .)
    DIV             reduce using rule 123 (term -> term multiplicativeOperator factor .)
    MOD             reduce using rule 123 (term -> term multiplicativeOperator factor .)
    AND             reduce using rule 123 (term -> term multiplicativeOperator factor .)
    EQUAL           reduce using rule 123 (term -> term multiplicativeOperator factor .)
    NOT_EQUAL       reduce using rule 123 (term -> term multiplicativeOperator factor .)
    LT              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    LE              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    GT              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    GE              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    IN              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    PLUS            reduce using rule 123 (term -> term multiplicativeOperator factor .)
    MINUS           reduce using rule 123 (term -> term multiplicativeOperator factor .)
    OR              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    THEN            reduce using rule 123 (term -> term multiplicativeOperator factor .)
    DO              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    END             reduce using rule 123 (term -> term multiplicativeOperator factor .)
    SEMI            reduce using rule 123 (term -> term multiplicativeOperator factor .)
    UNTIL           reduce using rule 123 (term -> term multiplicativeOperator factor .)
    ELSE            reduce using rule 123 (term -> term multiplicativeOperator factor .)
    RPAREN          reduce using rule 123 (term -> term multiplicativeOperator factor .)
    COMMA           reduce using rule 123 (term -> term multiplicativeOperator factor .)
    RBRACK          reduce using rule 123 (term -> term multiplicativeOperator factor .)
    TO              reduce using rule 123 (term -> term multiplicativeOperator factor .)
    DOWNTO          reduce using rule 123 (term -> term multiplicativeOperator factor .)
    COLON           reduce using rule 123 (term -> term multiplicativeOperator factor .)


state 194

    (131) factor -> LPAREN expression RPAREN .

    STAR            reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    SLASH           reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 131 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 131 (factor -> LPAREN expression RPAREN .)


state 195

    (152) forStatement -> FOR identifier ASSIGN expression . TO expression DO statement
    (153) forStatement -> FOR identifier ASSIGN expression . DOWNTO expression DO statement

    TO              shift and go to state 210
    DOWNTO          shift and go to state 211


state 196

    (154) whileStatement -> WHILE expression DO statement .

    END             reduce using rule 154 (whileStatement -> WHILE expression DO statement .)
    SEMI            reduce using rule 154 (whileStatement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 154 (whileStatement -> WHILE expression DO statement .)
    ELSE            reduce using rule 154 (whileStatement -> WHILE expression DO statement .)


state 197

    (155) repeatStatement -> REPEAT statements UNTIL expression .

    END             reduce using rule 155 (repeatStatement -> REPEAT statements UNTIL expression .)
    SEMI            reduce using rule 155 (repeatStatement -> REPEAT statements UNTIL expression .)
    UNTIL           reduce using rule 155 (repeatStatement -> REPEAT statements UNTIL expression .)
    ELSE            reduce using rule 155 (repeatStatement -> REPEAT statements UNTIL expression .)


state 198

    (28) constantChr -> CHR LPAREN unsignedInteger . RPAREN

    RPAREN          shift and go to state 212


state 199

    (38) scalarType -> LPAREN identifierList RPAREN .

    SEMI            reduce using rule 38 (scalarType -> LPAREN identifierList RPAREN .)


state 200

    (41) subrangeType -> unsignedInteger DOTDOT unsignedInteger .

    SEMI            reduce using rule 41 (subrangeType -> unsignedInteger DOTDOT unsignedInteger .)
    RBRACK          reduce using rule 41 (subrangeType -> unsignedInteger DOTDOT unsignedInteger .)


state 201

    (43) stringType -> STRING LBRACK unsignedInteger . RBRACK

    RBRACK          shift and go to state 213


state 202

    (47) arrayType -> ARRAY LBRACK subrangeType . RBRACK OF typeIdentifier

    RBRACK          shift and go to state 214


state 203

    (86) formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection .

    RPAREN          reduce using rule 86 (formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection .)
    SEMI            reduce using rule 86 (formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection .)


state 204

    (92) parameterGroup -> identifierList COLON typeIdentifier .

    RPAREN          reduce using rule 92 (parameterGroup -> identifierList COLON typeIdentifier .)
    SEMI            reduce using rule 92 (parameterGroup -> identifierList COLON typeIdentifier .)


state 205

    (93) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI . block
    (4) block -> . declarations compoundStatement
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (159) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration
    (82) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (93) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 159 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    block                          shift and go to state 215
    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 206

    (139) expressionList -> expressionList COMMA expression .

    RPAREN          reduce using rule 139 (expressionList -> expressionList COMMA expression .)
    COMMA           reduce using rule 139 (expressionList -> expressionList COMMA expression .)


state 207

    (140) expressionList -> expressionList COMMA formattedExpression .

    RPAREN          reduce using rule 140 (expressionList -> expressionList COMMA formattedExpression .)
    COMMA           reduce using rule 140 (expressionList -> expressionList COMMA formattedExpression .)


state 208

    (143) formattedExpression -> variable COLON expression . COLON expression
    (144) formattedExpression -> variable COLON expression .

    COLON           shift and go to state 216
    RPAREN          reduce using rule 144 (formattedExpression -> variable COLON expression .)
    COMMA           reduce using rule 144 (formattedExpression -> variable COLON expression .)


state 209

    (158) ifStatement -> IF expression THEN statement ELSE . statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 145 (emptyStatement_ -> .)
    END             reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    UNTIL           reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    statement                      shift and go to state 217
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    identifier                     shift and go to state 49
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 210

    (152) forStatement -> FOR identifier ASSIGN expression TO . expression DO statement
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    identifier                     shift and go to state 88
    expression                     shift and go to state 218
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 211

    (153) forStatement -> FOR identifier ASSIGN expression DOWNTO . expression DO statement
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    identifier                     shift and go to state 88
    expression                     shift and go to state 219
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    variable                       shift and go to state 85
    unsignedConstant               shift and go to state 86
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 212

    (28) constantChr -> CHR LPAREN unsignedInteger RPAREN .

    SEMI            reduce using rule 28 (constantChr -> CHR LPAREN unsignedInteger RPAREN .)


state 213

    (43) stringType -> STRING LBRACK unsignedInteger RBRACK .

    SEMI            reduce using rule 43 (stringType -> STRING LBRACK unsignedInteger RBRACK .)


state 214

    (47) arrayType -> ARRAY LBRACK subrangeType RBRACK . OF typeIdentifier

    OF              shift and go to state 220


state 215

    (93) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .

    CONST           reduce using rule 93 (functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .)
    TYPE            reduce using rule 93 (functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .)
    VAR             reduce using rule 93 (functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .)
    PROCEDURE       reduce using rule 93 (functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .)
    FUNCTION        reduce using rule 93 (functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .)
    BEGIN           reduce using rule 93 (functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .)


state 216

    (143) formattedExpression -> variable COLON expression COLON . expression
    (107) expression -> . simpleExpression
    (108) expression -> . simpleExpression relationalOperator simpleExpression
    (116) simpleExpression -> . term
    (117) simpleExpression -> . sign term
    (118) simpleExpression -> . simpleExpression additiveOperator term
    (122) term -> . factor
    (123) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (129) factor -> . variable
    (130) factor -> . unsignedConstant
    (131) factor -> . LPAREN expression RPAREN
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (132) unsignedConstant -> . unsignedNumber
    (133) unsignedConstant -> . string
    (134) unsignedConstant -> . NIL
    (135) unsignedConstant -> . TRUE
    (136) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (106) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    LPAREN          shift and go to state 87
    NIL             shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 96
    NUM_INT         shift and go to state 97
    NUM_REAL        shift and go to state 98

    variable                       shift and go to state 85
    expression                     shift and go to state 221
    simpleExpression               shift and go to state 79
    term                           shift and go to state 80
    sign                           shift and go to state 81
    factor                         shift and go to state 82
    unsignedConstant               shift and go to state 86
    identifier                     shift and go to state 88
    indexedVariable                shift and go to state 54
    unsignedNumber                 shift and go to state 89
    string                         shift and go to state 90
    unsignedInteger                shift and go to state 94
    unsignedReal                   shift and go to state 95

state 217

    (158) ifStatement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 158 (ifStatement -> IF expression THEN statement ELSE statement .)
    SEMI            reduce using rule 158 (ifStatement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 158 (ifStatement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 158 (ifStatement -> IF expression THEN statement ELSE statement .)


state 218

    (152) forStatement -> FOR identifier ASSIGN expression TO expression . DO statement

    DO              shift and go to state 222


state 219

    (153) forStatement -> FOR identifier ASSIGN expression DOWNTO expression . DO statement

    DO              shift and go to state 223


state 220

    (47) arrayType -> ARRAY LBRACK subrangeType RBRACK OF . typeIdentifier
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (3) identifier -> . IDENT

    INTEGER         shift and go to state 120
    REAL            shift and go to state 121
    BOOLEAN         shift and go to state 122
    CHAR            shift and go to state 123
    STRING          shift and go to state 185
    IDENT           shift and go to state 20

    typeIdentifier                 shift and go to state 224
    identifier                     shift and go to state 111

state 221

    (143) formattedExpression -> variable COLON expression COLON expression .

    RPAREN          reduce using rule 143 (formattedExpression -> variable COLON expression COLON expression .)
    COMMA           reduce using rule 143 (formattedExpression -> variable COLON expression COLON expression .)


state 222

    (152) forStatement -> FOR identifier ASSIGN expression TO expression DO . statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 145 (emptyStatement_ -> .)
    END             reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    UNTIL           reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    identifier                     shift and go to state 49
    statement                      shift and go to state 225
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 223

    (153) forStatement -> FOR identifier ASSIGN expression DOWNTO expression DO . statement
    (98) statement -> . simpleStatement
    (99) statement -> . structuredStatement
    (100) simpleStatement -> . assignmentStatement
    (101) simpleStatement -> . procedureStatement
    (102) simpleStatement -> . emptyStatement_
    (146) structuredStatement -> . compoundStatement
    (147) structuredStatement -> . conditionalStatement
    (148) structuredStatement -> . loopStatement
    (103) assignmentStatement -> . variable ASSIGN expression
    (137) procedureStatement -> . identifier
    (138) procedureStatement -> . identifier LPAREN expressionList RPAREN
    (145) emptyStatement_ -> .
    (95) compoundStatement -> . BEGIN statements END
    (156) conditionalStatement -> . ifStatement
    (149) loopStatement -> . forStatement
    (150) loopStatement -> . whileStatement
    (151) loopStatement -> . repeatStatement
    (104) variable -> . identifier
    (105) variable -> . indexedVariable
    (3) identifier -> . IDENT
    (157) ifStatement -> . IF expression THEN statement
    (158) ifStatement -> . IF expression THEN statement ELSE statement
    (152) forStatement -> . FOR identifier ASSIGN expression TO expression DO statement
    (153) forStatement -> . FOR identifier ASSIGN expression DOWNTO expression DO statement
    (154) whileStatement -> . WHILE expression DO statement
    (155) repeatStatement -> . REPEAT statements UNTIL expression
    (106) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 145 (emptyStatement_ -> .)
    END             reduce using rule 145 (emptyStatement_ -> .)
    SEMI            reduce using rule 145 (emptyStatement_ -> .)
    UNTIL           reduce using rule 145 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 55
    FOR             shift and go to state 56
    WHILE           shift and go to state 57
    REPEAT          shift and go to state 58

    identifier                     shift and go to state 49
    statement                      shift and go to state 226
    simpleStatement                shift and go to state 40
    structuredStatement            shift and go to state 41
    assignmentStatement            shift and go to state 42
    procedureStatement             shift and go to state 43
    emptyStatement_                shift and go to state 44
    compoundStatement              shift and go to state 45
    conditionalStatement           shift and go to state 46
    loopStatement                  shift and go to state 47
    variable                       shift and go to state 48
    ifStatement                    shift and go to state 50
    forStatement                   shift and go to state 51
    whileStatement                 shift and go to state 52
    repeatStatement                shift and go to state 53
    indexedVariable                shift and go to state 54

state 224

    (47) arrayType -> ARRAY LBRACK subrangeType RBRACK OF typeIdentifier .

    SEMI            reduce using rule 47 (arrayType -> ARRAY LBRACK subrangeType RBRACK OF typeIdentifier .)


state 225

    (152) forStatement -> FOR identifier ASSIGN expression TO expression DO statement .

    END             reduce using rule 152 (forStatement -> FOR identifier ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 152 (forStatement -> FOR identifier ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 152 (forStatement -> FOR identifier ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 152 (forStatement -> FOR identifier ASSIGN expression TO expression DO statement .)


state 226

    (153) forStatement -> FOR identifier ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 153 (forStatement -> FOR identifier ASSIGN expression DOWNTO expression DO statement .)
    SEMI            reduce using rule 153 (forStatement -> FOR identifier ASSIGN expression DOWNTO expression DO statement .)
    UNTIL           reduce using rule 153 (forStatement -> FOR identifier ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 153 (forStatement -> FOR identifier ASSIGN expression DOWNTO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 190 resolved as shift
