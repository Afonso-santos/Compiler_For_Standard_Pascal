
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftORleftANDleftNOTleftEQUALNOT_EQUALLTLEGTGEINleftPLUSMINUSleftSTARSLASHDIVMODAND ARRAY ASSIGN AT BEGIN BOOLEAN CASE CHAR CHR COLON COMMA CONST DIV DO DOT DOTDOT DOWNTO ELSE END EQUAL EXTERNAL FALSE FILE FOR FUNCTION GE GOTO GT IDENT IF IMPLEMENTATION IN INTEGER INTERFACE LABEL LBRACK LBRACK2 LCURLY LE LPAREN LT MINUS MOD NIL NOT NOT_EQUAL NUM_INT NUM_REAL OF OR PACKED PLUS POINTER PROCEDURE PROGRAM RBRACK RBRACK2 RCURLY REAL RECORD REPEAT RPAREN SEMI SET SLASH STAR STRING STRING_LITERAL THEN TO TRUE TYPE UNIT UNTIL VAR WHILE WITHprogram : programHeading block DOTprogramHeading : PROGRAM identifier SEMIidentifier : IDENTblock : declarations compoundStatementdeclarations : declaration declarations\n    | emptydeclaration : constantDefinitionBlock\n    | typeDeclarationBlock\n    | variableDeclarationBlock\n    | procedureAndFunctionDeclarationBlockconstantDefinitionBlock : CONST constantDefinitionListconstantDefinitionList : constantDefinitionList constantDefinition SEMI\n    | constantDefinition SEMIconstantDefinition : identifier EQUAL constantconstant : unsignedNumber\n    | sign unsignedNumber\n    | identifier\n    | sign identifier\n    | string\n    | constantChrunsignedNumber : unsignedInteger\n    | unsignedRealunsignedInteger : NUM_INTunsignedReal : NUM_REALsign : PLUS\n    | MINUSstring : STRING_LITERALconstantChr : CHR LPAREN unsignedInteger RPARENtypeDeclarationBlock : TYPE typeDefinitionListtypeDefinitionList : typeDefinitionList typeDefinition SEMI\n    | typeDefinition SEMItypeDefinition : identifier EQUAL type_type_ : scalarType\n    | subrangeType\n    | typeIdentifier\n    | stringType\n    | arrayTypescalarType : LPAREN identifierList RPARENidentifierList : identifierList COMMA identifier\n    | identifiersubrangeType : unsignedInteger DOTDOT unsignedIntegeridentifierType : IDENTstringType : STRING LBRACK unsignedInteger RBRACKstructuredType : arrayType\n    | recordType\n    | setTypearrayType : ARRAY LBRACK subrangeType RBRACK OF typeIdentifiertypeList : typeList COMMA indexType\n    | indexTypeindexType : simpleTypesimpleType : identifierTyperecordType : RECORD fieldList ENDfieldList : fixedPart\n    | fixedPart SEMI variantPart\n    | variantPartfixedPart : recordSectionListrecordSectionList : recordSectionList SEMI recordSection\n    | recordSectionrecordSection : identifierList COLON type_variantPart : CASE tag OF variantListtag : identifier COLON typeIdentifier\n    | typeIdentifiertypeIdentifier : identifier\n    | INTEGER\n    | REAL\n    | BOOLEAN\n    | CHAR\n    | STRINGvariantList : variantList SEMI variant\n    | variantvariant : constList COLON LPAREN fieldList RPARENconstList : constList COMMA constant\n    | constantsetType : SET OF baseTypebaseType : simpleTypevariableDeclarationBlock : VAR variableDeclarationList SEMIvariableDeclarationList : variableDeclarationList SEMI variableDeclaration\n    | variableDeclarationvariableDeclaration : identifierList COLON type_procedureAndFunctionDeclarationBlock : procedureDeclaration SEMI\n                                            | functionDeclaration SEMIprocedureDeclaration : PROCEDURE identifier SEMI block\n                            | PROCEDURE identifier formalParameterList_opt SEMI blockformalParameterList_opt : formalParameterList\n                               | emptyformalParameterList : LPAREN formalParameterSectionList RPARENformalParameterSectionList : formalParameterSectionList SEMI formalParameterSection\n                                  | formalParameterSectionformalParameterSection : parameterGroup\n    | VAR parameterGroup\n    | FUNCTION parameterGroup\n    | PROCEDURE parameterGroupparameterGroup : identifierList COLON typeIdentifierfunctionDeclaration : FUNCTION identifier formalParameterList_opt COLON resultType SEMI blockresultType : typeIdentifiercompoundStatement : BEGIN statements ENDstatements : statementListstatementList : statementList SEMI statement\n                     | statementstatement : simpleStatement\n                 | structuredStatement simpleStatement : callStatement \n                       | assignmentStatement\n                       | emptyStatement_assignmentStatement : variable ASSIGN Init_Finalvariable : identifier\n                | indexedVariableindexedVariable : identifier LBRACK expression RBRACKexpression : simpleExpression\n                  | simpleExpression relationalOperator simpleExpression\n                 relationalOperator : EQUAL\n    | NOT_EQUAL\n    | LT\n    | LE\n    | GT\n    | GE\n    | INsimpleExpression : term\n    | sign term\n    | simpleExpression additiveOperator termadditiveOperator : PLUS\n    | MINUS\n    | ORterm : factor\n    | term multiplicativeOperator factormultiplicativeOperator : STAR\n    | SLASH\n    | DIV\n    | MOD\n    | ANDfactor : variable\n        | unsignedConstant\n        | LPAREN expression RPARENunsignedConstant : unsignedNumber\n    | string\n    | NIL\n    | TRUE\n    | FALSEcallStatement : identifier \n                     | identifier LPAREN expressionList RPARENexpressionList : expressionList COMMA expression\n    | expressionList COMMA formattedExpression\n    | expression\n    | formattedExpressionformattedExpression : variable COLON expression COLON expression\n    | variable COLON expressionemptyStatement_ :structuredStatement : compoundStatement\n    | conditionalStatement\n    | loopStatementloopStatement : forStatement\n    | whileStatement\n    | repeatStatementforStatement : FOR identifier ASSIGN Init_Final TO Init_Final DO statement\n                    | FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement Init_Final : callStatement\n                   | expression whileStatement : WHILE expression DO statementrepeatStatement : REPEAT statements UNTIL expressionconditionalStatement : ifStatementifStatement : IF expression THEN statement\n    | IF expression THEN statement ELSE statementempty :'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,21,],[0,-1,]),'BEGIN':([2,5,6,7,8,9,10,11,23,24,25,28,35,36,39,61,63,66,68,71,78,106,114,134,152,174,212,216,229,230,],[-163,23,-163,-6,-7,-8,-9,-10,23,-5,-11,-29,-80,-81,-2,23,-13,-31,-76,-163,23,-12,-30,-163,23,23,-163,23,23,23,]),'CONST':([2,6,8,9,10,11,25,28,35,36,39,63,66,68,71,106,114,134,212,],[12,12,-7,-8,-9,-10,-11,-29,-80,-81,-2,-13,-31,-76,12,-12,-30,12,12,]),'TYPE':([2,6,8,9,10,11,25,28,35,36,39,63,66,68,71,106,114,134,212,],[13,13,-7,-8,-9,-10,-11,-29,-80,-81,-2,-13,-31,-76,13,-12,-30,13,13,]),'VAR':([2,6,8,9,10,11,25,28,35,36,39,63,66,68,71,75,106,114,134,185,212,],[14,14,-7,-8,-9,-10,-11,-29,-80,-81,-2,-13,-31,-76,14,138,-12,-30,14,138,14,]),'PROCEDURE':([2,6,8,9,10,11,25,28,35,36,39,63,66,68,71,75,106,114,134,185,212,],[17,17,-7,-8,-9,-10,-11,-29,-80,-81,-2,-13,-31,-76,17,140,-12,-30,17,140,17,]),'FUNCTION':([2,6,8,9,10,11,25,28,35,36,39,63,66,68,71,75,106,114,134,185,212,],[18,18,-7,-8,-9,-10,-11,-29,-80,-81,-2,-13,-31,-76,18,139,-12,-30,18,139,18,]),'IDENT':([3,12,13,14,17,18,23,25,28,58,59,60,61,63,64,66,67,68,69,70,75,78,79,80,81,85,87,88,91,106,110,114,122,138,139,140,142,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,174,175,185,189,194,195,216,217,218,223,227,229,230,],[20,20,20,20,20,20,20,20,20,20,20,20,20,-13,20,-31,20,20,20,20,20,20,20,20,20,20,-25,-26,20,-12,20,-30,20,20,20,20,20,20,20,20,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,20,-126,-127,-128,-129,-130,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'DOT':([4,22,77,],[21,-4,-96,]),'SEMI':([15,16,19,20,22,23,26,29,31,32,37,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,61,62,65,72,73,74,77,78,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,107,108,109,111,112,115,116,117,118,119,120,121,124,125,126,127,128,130,131,133,135,136,137,143,149,150,151,152,171,174,176,177,183,184,186,187,188,190,191,192,193,196,197,198,199,200,201,203,204,206,207,210,211,216,219,220,222,224,229,230,231,232,233,],[35,36,39,-3,-4,-147,63,66,68,-78,71,78,-99,-100,-101,-102,-103,-104,-148,-149,-150,-106,-160,-151,-152,-153,-107,-147,106,114,134,-84,-85,-96,-147,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-17,-14,-15,-19,-20,-63,-32,-33,-34,-35,-36,-37,-64,-65,-66,-67,-68,-77,-79,-82,185,-88,-89,-98,-105,-156,-157,-147,-119,-147,-16,-18,-83,-86,-90,-91,-92,212,-95,-68,-140,-108,-161,-110,-120,-125,-133,-158,-159,-38,-41,-87,-93,-147,-28,-43,-94,-162,-147,-147,-47,-154,-155,]),'EQUAL':([20,27,30,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,64,67,-106,-107,155,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,-120,-125,-133,]),'COLON':([20,33,34,38,57,73,74,76,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,132,141,147,171,184,196,198,199,200,201,215,],[-3,69,-40,-163,-107,-84,-85,142,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-39,189,195,-119,-86,-108,-110,-120,-125,-133,223,]),'COMMA':([20,33,34,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,132,141,144,145,146,147,171,179,196,198,199,200,201,213,214,215,228,],[-3,70,-40,-107,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-39,70,194,-143,-144,-131,-119,70,-108,-110,-120,-125,-133,-141,-142,-146,-145,]),'LPAREN':([20,37,38,51,58,60,67,69,79,80,81,85,87,88,91,113,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,175,194,195,217,218,223,],[-3,75,75,79,91,91,122,122,91,91,91,91,-25,-26,91,178,91,91,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,91,-126,-127,-128,-129,-130,91,91,91,91,91,91,91,]),'LBRACK':([20,51,92,128,129,],[-3,80,80,181,182,]),'END':([20,23,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,77,78,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,143,149,150,151,152,171,174,193,196,197,198,199,200,201,203,204,216,224,229,230,232,233,],[-3,-147,77,-97,-99,-100,-101,-102,-103,-104,-148,-149,-150,-106,-160,-151,-152,-153,-107,-96,-147,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-98,-105,-156,-157,-147,-119,-147,-140,-108,-161,-110,-120,-125,-133,-158,-159,-147,-162,-147,-147,-154,-155,]),'ASSIGN':([20,51,52,57,103,196,],[-3,-106,81,-107,173,-108,]),'STAR':([20,51,57,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,166,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,166,-108,166,-125,-133,]),'SLASH':([20,51,57,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,167,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,167,-108,167,-125,-133,]),'DIV':([20,51,57,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,168,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,168,-108,168,-125,-133,]),'MOD':([20,51,57,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,169,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,169,-108,169,-125,-133,]),'AND':([20,51,57,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,170,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,170,-108,170,-125,-133,]),'NOT_EQUAL':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,156,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,-120,-125,-133,]),'LT':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,157,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,-120,-125,-133,]),'LE':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,158,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,-120,-125,-133,]),'GT':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,159,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,-120,-125,-133,]),'GE':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,160,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,-120,-125,-133,]),'IN':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,199,200,201,],[-3,-106,-107,161,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,-120,-125,-133,]),'PLUS':([20,51,57,58,60,64,79,80,81,83,84,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,147,153,155,156,157,158,159,160,161,171,173,175,194,195,196,198,199,200,201,217,218,223,],[-3,-106,-107,87,87,87,87,87,87,162,-118,-124,-131,-132,87,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,87,-111,-112,-113,-114,-115,-116,-117,-119,87,87,87,87,-108,162,-120,-125,-133,87,87,87,]),'MINUS':([20,51,57,58,60,64,79,80,81,83,84,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,147,153,155,156,157,158,159,160,161,171,173,175,194,195,196,198,199,200,201,217,218,223,],[-3,-106,-107,88,88,88,88,88,88,163,-118,-124,-131,-132,88,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,88,-111,-112,-113,-114,-115,-116,-117,-119,88,88,88,88,-108,163,-120,-125,-133,88,88,88,]),'OR':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,147,171,196,198,199,200,201,],[-3,-106,-107,164,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-131,-119,-108,164,-120,-125,-133,]),'THEN':([20,57,82,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,171,196,198,199,200,201,],[-3,-107,152,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-119,-108,-110,-120,-125,-133,]),'DO':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,104,150,151,171,193,196,198,199,200,201,225,226,],[-3,-106,-107,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,174,-156,-157,-119,-140,-108,-110,-120,-125,-133,229,230,]),'UNTIL':([20,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,61,77,78,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,105,143,149,150,151,152,171,174,193,196,197,198,199,200,201,203,204,216,224,229,230,232,233,],[-3,-97,-99,-100,-101,-102,-103,-104,-148,-149,-150,-106,-160,-151,-152,-153,-107,-147,-96,-147,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,175,-98,-105,-156,-157,-147,-119,-147,-140,-108,-161,-110,-120,-125,-133,-158,-159,-147,-162,-147,-147,-154,-155,]),'RPAREN':([20,34,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,115,124,125,126,127,132,135,136,137,144,145,146,147,171,172,179,186,187,188,192,196,198,199,200,201,205,210,211,213,214,215,228,],[-3,-40,-107,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-63,-64,-65,-66,-67,-39,184,-88,-89,193,-143,-144,-131,-119,201,206,-90,-91,-92,-68,-108,-110,-120,-125,-133,219,-87,-93,-141,-142,-146,-145,]),'RBRACK':([20,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,148,171,196,198,199,200,201,207,208,209,],[-3,-107,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,196,-119,-108,-110,-120,-125,-133,-41,220,221,]),'ELSE':([20,43,44,45,46,47,48,49,50,51,53,54,55,56,57,77,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,149,150,151,152,171,174,193,196,197,198,199,200,201,203,204,216,224,229,230,232,233,],[-3,-100,-101,-102,-103,-104,-148,-149,-150,-106,-160,-151,-152,-153,-107,-96,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-105,-156,-157,-147,-119,-147,-140,-108,216,-110,-120,-125,-133,-158,-159,-147,-162,-147,-147,-154,-155,]),'TO':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,150,151,171,193,196,198,199,200,201,202,],[-3,-106,-107,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-156,-157,-119,-140,-108,-110,-120,-125,-133,217,]),'DOWNTO':([20,51,57,83,84,86,89,90,92,93,94,95,96,97,98,99,100,101,102,150,151,171,193,196,198,199,200,201,202,],[-3,-106,-107,-109,-118,-124,-131,-132,-106,-134,-135,-136,-137,-138,-21,-22,-27,-23,-24,-156,-157,-119,-140,-108,-110,-120,-125,-133,218,]),'IF':([23,61,78,152,174,216,229,230,],[58,58,58,58,58,58,58,58,]),'FOR':([23,61,78,152,174,216,229,230,],[59,59,59,59,59,59,59,59,]),'WHILE':([23,61,78,152,174,216,229,230,],[60,60,60,60,60,60,60,60,]),'REPEAT':([23,61,78,152,174,216,229,230,],[61,61,61,61,61,61,61,61,]),'NIL':([58,60,79,80,81,85,87,88,91,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,175,194,195,217,218,223,],[95,95,95,95,95,95,-25,-26,95,95,95,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,95,-126,-127,-128,-129,-130,95,95,95,95,95,95,95,]),'TRUE':([58,60,79,80,81,85,87,88,91,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,175,194,195,217,218,223,],[96,96,96,96,96,96,-25,-26,96,96,96,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,96,-126,-127,-128,-129,-130,96,96,96,96,96,96,96,]),'FALSE':([58,60,79,80,81,85,87,88,91,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,175,194,195,217,218,223,],[97,97,97,97,97,97,-25,-26,97,97,97,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,97,-126,-127,-128,-129,-130,97,97,97,97,97,97,97,]),'STRING_LITERAL':([58,60,64,79,80,81,85,87,88,91,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,175,194,195,217,218,223,],[100,100,100,100,100,100,100,-25,-26,100,100,100,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,100,-126,-127,-128,-129,-130,100,100,100,100,100,100,100,]),'NUM_INT':([58,60,64,67,69,79,80,81,85,87,88,91,110,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,175,178,180,181,182,194,195,217,218,223,],[101,101,101,101,101,101,101,101,101,-25,-26,101,101,101,101,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,101,-126,-127,-128,-129,-130,101,101,101,101,101,101,101,101,101,101,101,]),'NUM_REAL':([58,60,64,79,80,81,85,87,88,91,110,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,173,175,194,195,217,218,223,],[102,102,102,102,102,102,102,-25,-26,102,102,102,102,-111,-112,-113,-114,-115,-116,-117,-121,-122,-123,102,-126,-127,-128,-129,-130,102,102,102,102,102,102,102,]),'CHR':([64,],[113,]),'INTEGER':([67,69,142,189,227,],[124,124,124,124,124,]),'REAL':([67,69,142,189,227,],[125,125,125,125,125,]),'BOOLEAN':([67,69,142,189,227,],[126,126,126,126,126,]),'CHAR':([67,69,142,189,227,],[127,127,127,127,127,]),'STRING':([67,69,142,189,227,],[128,128,192,192,192,]),'ARRAY':([67,69,],[129,129,]),'DOTDOT':([101,123,],[-23,180,]),'OF':([221,],[227,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programHeading':([0,],[2,]),'block':([2,71,134,212,],[4,133,183,222,]),'declarations':([2,6,71,134,212,],[5,24,5,5,5,]),'declaration':([2,6,71,134,212,],[6,6,6,6,6,]),'empty':([2,6,37,38,71,134,212,],[7,7,74,74,7,7,7,]),'constantDefinitionBlock':([2,6,71,134,212,],[8,8,8,8,8,]),'typeDeclarationBlock':([2,6,71,134,212,],[9,9,9,9,9,]),'variableDeclarationBlock':([2,6,71,134,212,],[10,10,10,10,10,]),'procedureAndFunctionDeclarationBlock':([2,6,71,134,212,],[11,11,11,11,11,]),'procedureDeclaration':([2,6,71,134,212,],[15,15,15,15,15,]),'functionDeclaration':([2,6,71,134,212,],[16,16,16,16,16,]),'identifier':([3,12,13,14,17,18,23,25,28,58,59,60,61,64,67,68,69,70,75,78,79,80,81,85,91,110,122,138,139,140,142,152,153,154,165,173,174,175,185,189,194,195,216,217,218,223,227,229,230,],[19,27,30,34,37,38,51,27,30,92,103,92,51,107,115,34,115,132,34,51,92,92,51,92,92,177,34,34,34,34,115,51,92,92,92,51,51,92,34,115,92,92,51,51,51,92,115,51,51,]),'compoundStatement':([5,23,61,78,152,174,216,229,230,],[22,48,48,48,48,48,48,48,48,]),'constantDefinitionList':([12,],[25,]),'constantDefinition':([12,25,],[26,62,]),'typeDefinitionList':([13,],[28,]),'typeDefinition':([13,28,],[29,65,]),'variableDeclarationList':([14,],[31,]),'variableDeclaration':([14,68,],[32,130,]),'identifierList':([14,68,75,122,138,139,140,185,],[33,33,141,179,141,141,141,141,]),'statements':([23,61,],[40,105,]),'statementList':([23,61,],[41,41,]),'statement':([23,61,78,152,174,216,229,230,],[42,42,143,197,203,224,232,233,]),'simpleStatement':([23,61,78,152,174,216,229,230,],[43,43,43,43,43,43,43,43,]),'structuredStatement':([23,61,78,152,174,216,229,230,],[44,44,44,44,44,44,44,44,]),'callStatement':([23,61,78,81,152,173,174,216,217,218,229,230,],[45,45,45,150,45,150,45,45,150,150,45,45,]),'assignmentStatement':([23,61,78,152,174,216,229,230,],[46,46,46,46,46,46,46,46,]),'emptyStatement_':([23,61,78,152,174,216,229,230,],[47,47,47,47,47,47,47,47,]),'conditionalStatement':([23,61,78,152,174,216,229,230,],[49,49,49,49,49,49,49,49,]),'loopStatement':([23,61,78,152,174,216,229,230,],[50,50,50,50,50,50,50,50,]),'variable':([23,58,60,61,78,79,80,81,85,91,152,153,154,165,173,174,175,194,195,216,217,218,223,229,230,],[52,89,89,52,52,147,89,89,89,89,52,89,89,89,89,52,89,147,89,52,89,89,89,52,52,]),'ifStatement':([23,61,78,152,174,216,229,230,],[53,53,53,53,53,53,53,53,]),'forStatement':([23,61,78,152,174,216,229,230,],[54,54,54,54,54,54,54,54,]),'whileStatement':([23,61,78,152,174,216,229,230,],[55,55,55,55,55,55,55,55,]),'repeatStatement':([23,61,78,152,174,216,229,230,],[56,56,56,56,56,56,56,56,]),'indexedVariable':([23,58,60,61,78,79,80,81,85,91,152,153,154,165,173,174,175,194,195,216,217,218,223,229,230,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'formalParameterList_opt':([37,38,],[72,76,]),'formalParameterList':([37,38,],[73,73,]),'expression':([58,60,79,80,81,91,173,175,194,195,217,218,223,],[82,104,145,148,151,172,151,204,213,215,151,151,228,]),'simpleExpression':([58,60,79,80,81,91,153,173,175,194,195,217,218,223,],[83,83,83,83,83,83,198,83,83,83,83,83,83,83,]),'term':([58,60,79,80,81,85,91,153,154,173,175,194,195,217,218,223,],[84,84,84,84,84,171,84,84,199,84,84,84,84,84,84,84,]),'sign':([58,60,64,79,80,81,91,153,173,175,194,195,217,218,223,],[85,85,110,85,85,85,85,85,85,85,85,85,85,85,85,]),'factor':([58,60,79,80,81,85,91,153,154,165,173,175,194,195,217,218,223,],[86,86,86,86,86,86,86,86,86,200,86,86,86,86,86,86,86,]),'unsignedConstant':([58,60,79,80,81,85,91,153,154,165,173,175,194,195,217,218,223,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'unsignedNumber':([58,60,64,79,80,81,85,91,110,153,154,165,173,175,194,195,217,218,223,],[93,93,109,93,93,93,93,93,176,93,93,93,93,93,93,93,93,93,93,]),'string':([58,60,64,79,80,81,85,91,153,154,165,173,175,194,195,217,218,223,],[94,94,111,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'unsignedInteger':([58,60,64,67,69,79,80,81,85,91,110,153,154,165,173,175,178,180,181,182,194,195,217,218,223,],[98,98,98,123,123,98,98,98,98,98,98,98,98,98,98,98,205,207,208,123,98,98,98,98,98,]),'unsignedReal':([58,60,64,79,80,81,85,91,110,153,154,165,173,175,194,195,217,218,223,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'constant':([64,],[108,]),'constantChr':([64,],[112,]),'type_':([67,69,],[116,131,]),'scalarType':([67,69,],[117,117,]),'subrangeType':([67,69,182,],[118,118,209,]),'typeIdentifier':([67,69,142,189,227,],[119,119,191,211,231,]),'stringType':([67,69,],[120,120,]),'arrayType':([67,69,],[121,121,]),'formalParameterSectionList':([75,],[135,]),'formalParameterSection':([75,185,],[136,210,]),'parameterGroup':([75,138,139,140,185,],[137,186,187,188,137,]),'expressionList':([79,],[144,]),'formattedExpression':([79,194,],[146,214,]),'Init_Final':([81,173,217,218,],[149,202,225,226,]),'relationalOperator':([83,],[153,]),'additiveOperator':([83,198,],[154,154,]),'multiplicativeOperator':([84,171,199,],[165,165,165,]),'resultType':([142,],[190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> programHeading block DOT','program',3,'p_program','parser.py',87),
  ('programHeading -> PROGRAM identifier SEMI','programHeading',3,'p_programHeading','parser.py',96),
  ('identifier -> IDENT','identifier',1,'p_identifier','parser.py',102),
  ('block -> declarations compoundStatement','block',2,'p_block','parser.py',108),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','parser.py',113),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',114),
  ('declaration -> constantDefinitionBlock','declaration',1,'p_declaration','parser.py',124),
  ('declaration -> typeDeclarationBlock','declaration',1,'p_declaration','parser.py',125),
  ('declaration -> variableDeclarationBlock','declaration',1,'p_declaration','parser.py',126),
  ('declaration -> procedureAndFunctionDeclarationBlock','declaration',1,'p_declaration','parser.py',127),
  ('constantDefinitionBlock -> CONST constantDefinitionList','constantDefinitionBlock',2,'p_constantDefinitionBlock','parser.py',132),
  ('constantDefinitionList -> constantDefinitionList constantDefinition SEMI','constantDefinitionList',3,'p_constantDefinitionList','parser.py',137),
  ('constantDefinitionList -> constantDefinition SEMI','constantDefinitionList',2,'p_constantDefinitionList','parser.py',138),
  ('constantDefinition -> identifier EQUAL constant','constantDefinition',3,'p_constantDefinition','parser.py',147),
  ('constant -> unsignedNumber','constant',1,'p_constant','parser.py',153),
  ('constant -> sign unsignedNumber','constant',2,'p_constant','parser.py',154),
  ('constant -> identifier','constant',1,'p_constant','parser.py',155),
  ('constant -> sign identifier','constant',2,'p_constant','parser.py',156),
  ('constant -> string','constant',1,'p_constant','parser.py',157),
  ('constant -> constantChr','constant',1,'p_constant','parser.py',158),
  ('unsignedNumber -> unsignedInteger','unsignedNumber',1,'p_unsignedNumber','parser.py',169),
  ('unsignedNumber -> unsignedReal','unsignedNumber',1,'p_unsignedNumber','parser.py',170),
  ('unsignedInteger -> NUM_INT','unsignedInteger',1,'p_unsignedInteger','parser.py',175),
  ('unsignedReal -> NUM_REAL','unsignedReal',1,'p_unsignedReal','parser.py',180),
  ('sign -> PLUS','sign',1,'p_sign','parser.py',185),
  ('sign -> MINUS','sign',1,'p_sign','parser.py',186),
  ('string -> STRING_LITERAL','string',1,'p_string','parser.py',191),
  ('constantChr -> CHR LPAREN unsignedInteger RPAREN','constantChr',4,'p_constantChr','parser.py',196),
  ('typeDeclarationBlock -> TYPE typeDefinitionList','typeDeclarationBlock',2,'p_typeDeclarationBlock','parser.py',201),
  ('typeDefinitionList -> typeDefinitionList typeDefinition SEMI','typeDefinitionList',3,'p_typeDefinitionList','parser.py',206),
  ('typeDefinitionList -> typeDefinition SEMI','typeDefinitionList',2,'p_typeDefinitionList','parser.py',207),
  ('typeDefinition -> identifier EQUAL type_','typeDefinition',3,'p_typeDefinition','parser.py',216),
  ('type_ -> scalarType','type_',1,'p_type_','parser.py',221),
  ('type_ -> subrangeType','type_',1,'p_type_','parser.py',222),
  ('type_ -> typeIdentifier','type_',1,'p_type_','parser.py',223),
  ('type_ -> stringType','type_',1,'p_type_','parser.py',224),
  ('type_ -> arrayType','type_',1,'p_type_','parser.py',225),
  ('scalarType -> LPAREN identifierList RPAREN','scalarType',3,'p_scalarType','parser.py',230),
  ('identifierList -> identifierList COMMA identifier','identifierList',3,'p_identifierList','parser.py',235),
  ('identifierList -> identifier','identifierList',1,'p_identifierList','parser.py',236),
  ('subrangeType -> unsignedInteger DOTDOT unsignedInteger','subrangeType',3,'p_subrangeType','parser.py',246),
  ('identifierType -> IDENT','identifierType',1,'p_identifierType','parser.py',251),
  ('stringType -> STRING LBRACK unsignedInteger RBRACK','stringType',4,'p_stringType','parser.py',257),
  ('structuredType -> arrayType','structuredType',1,'p_structuredType','parser.py',262),
  ('structuredType -> recordType','structuredType',1,'p_structuredType','parser.py',263),
  ('structuredType -> setType','structuredType',1,'p_structuredType','parser.py',264),
  ('arrayType -> ARRAY LBRACK subrangeType RBRACK OF typeIdentifier','arrayType',6,'p_arrayType','parser.py',269),
  ('typeList -> typeList COMMA indexType','typeList',3,'p_typeList','parser.py',274),
  ('typeList -> indexType','typeList',1,'p_typeList','parser.py',275),
  ('indexType -> simpleType','indexType',1,'p_indexType','parser.py',284),
  ('simpleType -> identifierType','simpleType',1,'p_simpleType','parser.py',289),
  ('recordType -> RECORD fieldList END','recordType',3,'p_recordType','parser.py',294),
  ('fieldList -> fixedPart','fieldList',1,'p_fieldList','parser.py',299),
  ('fieldList -> fixedPart SEMI variantPart','fieldList',3,'p_fieldList','parser.py',300),
  ('fieldList -> variantPart','fieldList',1,'p_fieldList','parser.py',301),
  ('fixedPart -> recordSectionList','fixedPart',1,'p_fixedPart','parser.py',309),
  ('recordSectionList -> recordSectionList SEMI recordSection','recordSectionList',3,'p_recordSectionList','parser.py',314),
  ('recordSectionList -> recordSection','recordSectionList',1,'p_recordSectionList','parser.py',315),
  ('recordSection -> identifierList COLON type_','recordSection',3,'p_recordSection','parser.py',324),
  ('variantPart -> CASE tag OF variantList','variantPart',4,'p_variantPart','parser.py',329),
  ('tag -> identifier COLON typeIdentifier','tag',3,'p_tag','parser.py',334),
  ('tag -> typeIdentifier','tag',1,'p_tag','parser.py',335),
  ('typeIdentifier -> identifier','typeIdentifier',1,'p_typeIdentifier','parser.py',343),
  ('typeIdentifier -> INTEGER','typeIdentifier',1,'p_typeIdentifier','parser.py',344),
  ('typeIdentifier -> REAL','typeIdentifier',1,'p_typeIdentifier','parser.py',345),
  ('typeIdentifier -> BOOLEAN','typeIdentifier',1,'p_typeIdentifier','parser.py',346),
  ('typeIdentifier -> CHAR','typeIdentifier',1,'p_typeIdentifier','parser.py',347),
  ('typeIdentifier -> STRING','typeIdentifier',1,'p_typeIdentifier','parser.py',348),
  ('variantList -> variantList SEMI variant','variantList',3,'p_variantList','parser.py',357),
  ('variantList -> variant','variantList',1,'p_variantList','parser.py',358),
  ('variant -> constList COLON LPAREN fieldList RPAREN','variant',5,'p_variant','parser.py',367),
  ('constList -> constList COMMA constant','constList',3,'p_constList','parser.py',372),
  ('constList -> constant','constList',1,'p_constList','parser.py',373),
  ('setType -> SET OF baseType','setType',3,'p_setType','parser.py',382),
  ('baseType -> simpleType','baseType',1,'p_baseType','parser.py',387),
  ('variableDeclarationBlock -> VAR variableDeclarationList SEMI','variableDeclarationBlock',3,'p_variableDeclarationBlock','parser.py',392),
  ('variableDeclarationList -> variableDeclarationList SEMI variableDeclaration','variableDeclarationList',3,'p_variableDeclarationList','parser.py',397),
  ('variableDeclarationList -> variableDeclaration','variableDeclarationList',1,'p_variableDeclarationList','parser.py',398),
  ('variableDeclaration -> identifierList COLON type_','variableDeclaration',3,'p_variableDeclaration','parser.py',407),
  ('procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI','procedureAndFunctionDeclarationBlock',2,'p_procedureAndFunctionDeclarationBlock','parser.py',412),
  ('procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI','procedureAndFunctionDeclarationBlock',2,'p_procedureAndFunctionDeclarationBlock','parser.py',413),
  ('procedureDeclaration -> PROCEDURE identifier SEMI block','procedureDeclaration',4,'p_procedureDeclaration','parser.py',418),
  ('procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block','procedureDeclaration',5,'p_procedureDeclaration','parser.py',419),
  ('formalParameterList_opt -> formalParameterList','formalParameterList_opt',1,'p_formalParameterList_opt','parser.py',430),
  ('formalParameterList_opt -> empty','formalParameterList_opt',1,'p_formalParameterList_opt','parser.py',431),
  ('formalParameterList -> LPAREN formalParameterSectionList RPAREN','formalParameterList',3,'p_formalParameterList','parser.py',436),
  ('formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection','formalParameterSectionList',3,'p_formalParameterSectionList','parser.py',441),
  ('formalParameterSectionList -> formalParameterSection','formalParameterSectionList',1,'p_formalParameterSectionList','parser.py',442),
  ('formalParameterSection -> parameterGroup','formalParameterSection',1,'p_formalParameterSection','parser.py',451),
  ('formalParameterSection -> VAR parameterGroup','formalParameterSection',2,'p_formalParameterSection','parser.py',452),
  ('formalParameterSection -> FUNCTION parameterGroup','formalParameterSection',2,'p_formalParameterSection','parser.py',453),
  ('formalParameterSection -> PROCEDURE parameterGroup','formalParameterSection',2,'p_formalParameterSection','parser.py',454),
  ('parameterGroup -> identifierList COLON typeIdentifier','parameterGroup',3,'p_parameterGroup','parser.py',462),
  ('functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block','functionDeclaration',7,'p_functionDeclaration','parser.py',467),
  ('resultType -> typeIdentifier','resultType',1,'p_resultType','parser.py',476),
  ('compoundStatement -> BEGIN statements END','compoundStatement',3,'p_compoundStatement','parser.py',481),
  ('statements -> statementList','statements',1,'p_statements','parser.py',488),
  ('statementList -> statementList SEMI statement','statementList',3,'p_statementList','parser.py',492),
  ('statementList -> statement','statementList',1,'p_statementList','parser.py',493),
  ('statement -> simpleStatement','statement',1,'p_statement','parser.py',505),
  ('statement -> structuredStatement','statement',1,'p_statement','parser.py',506),
  ('simpleStatement -> callStatement','simpleStatement',1,'p_simpleStatement','parser.py',512),
  ('simpleStatement -> assignmentStatement','simpleStatement',1,'p_simpleStatement','parser.py',513),
  ('simpleStatement -> emptyStatement_','simpleStatement',1,'p_simpleStatement','parser.py',514),
  ('assignmentStatement -> variable ASSIGN Init_Final','assignmentStatement',3,'p_assignmentStatement','parser.py',520),
  ('variable -> identifier','variable',1,'p_variable','parser.py',526),
  ('variable -> indexedVariable','variable',1,'p_variable','parser.py',527),
  ('indexedVariable -> identifier LBRACK expression RBRACK','indexedVariable',4,'p_indexedVariable','parser.py',533),
  ('expression -> simpleExpression','expression',1,'p_expression','parser.py',538),
  ('expression -> simpleExpression relationalOperator simpleExpression','expression',3,'p_expression','parser.py',539),
  ('relationalOperator -> EQUAL','relationalOperator',1,'p_relationalOperator','parser.py',548),
  ('relationalOperator -> NOT_EQUAL','relationalOperator',1,'p_relationalOperator','parser.py',549),
  ('relationalOperator -> LT','relationalOperator',1,'p_relationalOperator','parser.py',550),
  ('relationalOperator -> LE','relationalOperator',1,'p_relationalOperator','parser.py',551),
  ('relationalOperator -> GT','relationalOperator',1,'p_relationalOperator','parser.py',552),
  ('relationalOperator -> GE','relationalOperator',1,'p_relationalOperator','parser.py',553),
  ('relationalOperator -> IN','relationalOperator',1,'p_relationalOperator','parser.py',554),
  ('simpleExpression -> term','simpleExpression',1,'p_simpleExpression','parser.py',559),
  ('simpleExpression -> sign term','simpleExpression',2,'p_simpleExpression','parser.py',560),
  ('simpleExpression -> simpleExpression additiveOperator term','simpleExpression',3,'p_simpleExpression','parser.py',561),
  ('additiveOperator -> PLUS','additiveOperator',1,'p_additiveOperator','parser.py',571),
  ('additiveOperator -> MINUS','additiveOperator',1,'p_additiveOperator','parser.py',572),
  ('additiveOperator -> OR','additiveOperator',1,'p_additiveOperator','parser.py',573),
  ('term -> factor','term',1,'p_term','parser.py',578),
  ('term -> term multiplicativeOperator factor','term',3,'p_term','parser.py',579),
  ('multiplicativeOperator -> STAR','multiplicativeOperator',1,'p_multiplicativeOperator','parser.py',587),
  ('multiplicativeOperator -> SLASH','multiplicativeOperator',1,'p_multiplicativeOperator','parser.py',588),
  ('multiplicativeOperator -> DIV','multiplicativeOperator',1,'p_multiplicativeOperator','parser.py',589),
  ('multiplicativeOperator -> MOD','multiplicativeOperator',1,'p_multiplicativeOperator','parser.py',590),
  ('multiplicativeOperator -> AND','multiplicativeOperator',1,'p_multiplicativeOperator','parser.py',591),
  ('factor -> variable','factor',1,'p_factor','parser.py',596),
  ('factor -> unsignedConstant','factor',1,'p_factor','parser.py',597),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',598),
  ('unsignedConstant -> unsignedNumber','unsignedConstant',1,'p_unsignedConstant','parser.py',609),
  ('unsignedConstant -> string','unsignedConstant',1,'p_unsignedConstant','parser.py',610),
  ('unsignedConstant -> NIL','unsignedConstant',1,'p_unsignedConstant','parser.py',611),
  ('unsignedConstant -> TRUE','unsignedConstant',1,'p_unsignedConstant','parser.py',612),
  ('unsignedConstant -> FALSE','unsignedConstant',1,'p_unsignedConstant','parser.py',613),
  ('callStatement -> identifier','callStatement',1,'p_callStatement','parser.py',623),
  ('callStatement -> identifier LPAREN expressionList RPAREN','callStatement',4,'p_callStatement','parser.py',624),
  ('expressionList -> expressionList COMMA expression','expressionList',3,'p_expressionList','parser.py',635),
  ('expressionList -> expressionList COMMA formattedExpression','expressionList',3,'p_expressionList','parser.py',636),
  ('expressionList -> expression','expressionList',1,'p_expressionList','parser.py',637),
  ('expressionList -> formattedExpression','expressionList',1,'p_expressionList','parser.py',638),
  ('formattedExpression -> variable COLON expression COLON expression','formattedExpression',5,'p_formattedExpression','parser.py',650),
  ('formattedExpression -> variable COLON expression','formattedExpression',3,'p_formattedExpression','parser.py',651),
  ('emptyStatement_ -> <empty>','emptyStatement_',0,'p_emptyStatement_','parser.py',660),
  ('structuredStatement -> compoundStatement','structuredStatement',1,'p_structuredStatement','parser.py',665),
  ('structuredStatement -> conditionalStatement','structuredStatement',1,'p_structuredStatement','parser.py',666),
  ('structuredStatement -> loopStatement','structuredStatement',1,'p_structuredStatement','parser.py',667),
  ('loopStatement -> forStatement','loopStatement',1,'p_loopStatement','parser.py',672),
  ('loopStatement -> whileStatement','loopStatement',1,'p_loopStatement','parser.py',673),
  ('loopStatement -> repeatStatement','loopStatement',1,'p_loopStatement','parser.py',674),
  ('forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO statement','forStatement',8,'p_forStatement','parser.py',679),
  ('forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement','forStatement',8,'p_forStatement','parser.py',680),
  ('Init_Final -> callStatement','Init_Final',1,'p_Init_Final','parser.py',686),
  ('Init_Final -> expression','Init_Final',1,'p_Init_Final','parser.py',687),
  ('whileStatement -> WHILE expression DO statement','whileStatement',4,'p_whileStatement','parser.py',694),
  ('repeatStatement -> REPEAT statements UNTIL expression','repeatStatement',4,'p_repeatStatement','parser.py',700),
  ('conditionalStatement -> ifStatement','conditionalStatement',1,'p_conditionalStatement','parser.py',705),
  ('ifStatement -> IF expression THEN statement','ifStatement',4,'p_ifStatement','parser.py',710),
  ('ifStatement -> IF expression THEN statement ELSE statement','ifStatement',6,'p_ifStatement','parser.py',711),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',719),
]
